웹 개발 web development
	: 정적사이트 static site ) 방문자에게 정보를 보여주기만 하는 웹사이트
	: 동적사이트 dynamic site ) 보여주는 것 뿐 아니라 서비스까지 제공하는 웹사이트

서버server 클라이언트 client
	: server ) response & request 하는 쪽
		:인터넷에 연결된 컴퓨터
	: client ) 정보를 request 하는 쪽
		: 사용자가 웹 사이트에 접근하려고 사용하려하는 기기 혹은 웹 브라우저
		: 사용자 인간 자체를 말하는게 아님을 주의


프런트 엔드>> 보이는거 디자인
백엔드>> db 처리
	: 백엔드 개발언어와 프레임워크
		* (1) 자바 && spring
		* (2) 파이썬 && Django
		(3) PHP &&CodeIgniter
		(4) Node.js&&Express

어쨌뜬 프런트를 하든 백엔드를 하든 기본적으로 알아야되는 것 >> HTML CSS 자바스크립트 Git

웹브라우저 : 크롬 엣지 파이어폭스
웹 편집기 == 에디터 == IDE


웹 문서의 경우 에디터에서 파일의 내용을 확인하고 실행내용은 브라우져에서 확인한다

HTML
	: 웹문서를 만드는 언어
		
	:  HyperText MarkupLanguage . 
 		: HyperText ) 링크. 연결.
		: Markup) (웹브라우저에 표시할) 텍스트 영상 등의 위치를 표시한다.

	: HTML 은 왜 HTML5 를 가리킬까
		: HTML 은 1,2,3,4,5 버전이 있고 가장 최근것이 HTML5 이다 . 대부분의 웹 브라우져에서 HTML5 를 쓰기 때문에 대부분 5 생략하고 걍 HTML 로 쓴다.

	: HTML 은 대소문자를 구분하지 않지만 통상적으로 소문자를 사용한다. (예외적으로 DOCTYPE 는 대문자로 쓰는 편)
	: HTML 파일의 확장자는 .html 로 해야된다.
	: 경로 tip
		1. html 에서 경로 잡을 때 상대경로와 절대경로 2가지 모두 이용할 수 있다.
			: 절대 경로 >> 젤 앞에 "/"를 쓴다
 			: 상대경로 >> 젤 앞에 "/"를 안쓴다
		2. webapp 디렉터리 내부의 파일(= jsp 파일)의 절대경로는 " /프로젝트명/해당파일명" 이다. 그러니까 /src/main/webapp 는 쓰지 않는다
			: 주의해야할 것은 해당파일의 확장자까지 정확하게 사용해야된다. (.jsp)
			ex) 	<form action="/Day2/Student2" method="post" >

		3. src/main/java 디렉터리 내부의 파일(=servlet 파일)의 절대경로는 "/프로젝트명/url패턴명" 이다.
			: 그러니까 src/main/java 는 쓰지 않고, servlet 파일명을 쓰는게 아니라 servlet 파일에 맵핑된 url패턴명을 사용한다( .java 확장자나 .class 확장자는 쓰지 않는다)
			ex)<form action="/Day2/PrintResult.jsp" method="post" >

	: html 파일에서 엔터는  화면상에 표시도 안되고 심지어 띄어쓰기 기능도 아니다. 걍 html 코드 자체의 가독성을 높이기 위해사용한다

		
	: 화면 낭독기 screen reader
		: 시각장애인이 컴터 사용할때 화면에 나타나는 정보를 음성으로 들려주는 프로그램
			: 그러니까 html 으로 적힌 내용을 기반으로 읽힌다 << 더 자세히 html 파일을 쓸 수록 도움이 된다.


	: 태그tag
		: 어떤걸 표시하는지 알게 해주는 꼬리표. (=markup 하게 해주는 꼬리표)
		: 꺽쇄로 표시되고, 주로 시작태그( <태그명> 꼴 )와 끝태그( </태그명> 꼴 ) 쌍으로 쓰인다
		: 태그 사용 tip
			1. 시작태그와 끝 태그 사이에 문자열을 입력하는 경우 "" 표시 없이 쓴다
			2. 태그로 인한 줄바꿈은 아무리 이어써도, 중첩해도 누적되서 나타나지 않고 해당 부분서 딱 한번만 일어난다
				: ex)
	<p>헤헤헤</p>
	<p></p><p>헤헤헤</p>
	<p><p>헤헤헤</p></p>

			3. 태그로 인한 들여쓰기는 중첩하는 경우 누적되어서 나타난다(이어쓰기론 일어나지 않는다)
				: ex) 
	<blockquote>가나다라마바사</blockquote>
	<blockquote><blockquote>가나다라마바사</blockquote></blockquote>
	<blockquote></blockquote><blockquote>가나다라마바사</blockquote>

			4. html 태그는 그 요소의 의미를 markup하기 위해 적는거지, 그 태그의 표현 스타일을 이용하기 위해 적는게 아니다(그런건 css 이다)
				: 그러니까 표현 스타일 이용하겠다고 의미에 맞지 않는 태그 쓰면 안된다.

			5. 여러 구성 요소를 묶는 기능을 하는 태그( li 를 묶는 ol 같은건) 가 아닌이상 , 태그들을 중첩시켜서 사용해야되는 상황에서 그 순서는 맘대로 해도 된다.
				: ex) <h2><u>나무위키</u></h2> , <u><h2>나무위키</h2></u>

		: 태그의 종류
			(1) void element >>  끝태그없이 쓰는 태그
				: <meta> <input>,.. 같은
			(2) Block 태그 && Inline 태그
				Block 태그- 쓰면 한 줄 다 차지 하는 태그(줄바꿈 필수적)
				Inline 태그- 줄바꿈 안일어나는 태그. 바로 다음에 다음태그가 올 수 있다. 


			
	: 요소 element 의 종류
		: 자식요소 
			: 태그가 중첩된 상황에서 밖을 감싸는 태그
		: 부모요소
			: 태그가 중첩된 상황에서 내부 태그
	: 속성 
		: (시작태그 내부에서)태그명 뒤에 추가 가능한 변수
		: 대부분의 속성은 값을 할당받아야되고 이떄 값은 모두 ""를 사용한 문자열의 형태로 넣어야된다.

	: HTML 에서의 열거 속성 Enumerated attribute
		: 일반적으로 컴퓨터 과학에서 말하는 열거형 타입==  (java나 c언어의 enum Week{"Monday" , "Sunday" , "Saturday"} 처럼 ) 이미 가질 수 있는 문자열 값들이 정해진 데이터 타입

		: HTML 에서의 열거 속성>> 사전 정의된 텍스트값들에 한정하여 값을 가질 수 있는 속성
		: 특징 ) 기본값이 존재
			: 기본값 >> 이거 mdn 사전에서 기본값이 뭘 기준으로 설정된다는건지 이해를 못하겠음
		: 대표적 열거 속성 ex
			:ex) HTML 의 전역 속성인 dir 은 ltr , rtl, auto 에 한하여 값을 가질 수 있음

	: HTML 에서의 불리언 속성 Boolean attributes
		: 별도로 속성에 값을 할당하지 않고 그 속성을 마크업 여부만으로도 "true" , "false"값을 할당하는 속성
			: 그러니까 속성명을 쓰기만 하면 그속성명="true" 로 인식되고, 그 속성을 쓰지 않음 자동적으로 그속성명="false"로 인식된다.

	: 전역 속성 Global Attributes << css, kava script 한번 보고 나서 여기 아래에 안쓴거 다시 검토하고, 써야됨.
		: 모든 태그에서 사용할 수 있는 속성
			: (대부분 효과가 있지만) 일부 태그에서는 효과가 없을 수 있지만 , 오류가 나진 않는다 
		: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes
		: 종류
			1. accesskey 
				: 단축키 생성
					: "alt +할당한키값"를 누르면 해당 동작이 일어나게 함 (참고로 alt 를 누르고 있는 상태서 키값을 누르는거다)
					: ex) 
						<buttton accesskey="s">button S</button>    <!-- s + alt 누름 마우스로 직접 클릭하지 않아도  button S 가 눌린다-->
						<a accexxkey="r" href="URL주소"> 네이버 바로가기</a> <!-- r + alt 누름 마우스로 직접 클릭하지 않아도 해당 주소로 이동한다-->	
				: 할당 가능한 값 == 키값 == 한글자 소문자

			2. autocapitalize  << 거의 노 쓸모이다. (직접적인 키보드 입력엔 적용이 안됨)
				: 클라이언트가 "가상"키보드 혹은 음성입력으로 입력하는 텍스트를 대/소문자로 변경
					: 만약 물리적인 키보드로 입력받은 거에 대소문자 변경 적용하고 싶음 css 나 javascript 해야된다
				: 할당 가능한 값
					(1) 모든 글자를 소문자로 함 : off || none
					(2) 각 문장의 첫글자를 대문자로 변환, 나머진 소문자: on || sentences
					(3) 각 단어의 첫글자를 대문자로 변환, 나머진 소문자 : words 
					(4) 모든 글자를 대문자로: characters
			3. class
				: 공백으로 구분한 요소 클래스의 목록 << 뭔뜻인지 모르겠음
					: 클래스 
						: CSS 혹은 Java Script 에서 클래스 선택자나 document.getElementsByClassName() 과 같은 메서드로 요소에 접근할  수 있는 방법
						: 자주 사용되는 스타일에 적용하는 것
							: ex) 빨강색 || 파란색 등 색상을 미리 지정하고 HTML에 적용시킴
				: 대소문자를 구분하지 않음

			4.id
				: 문서 전체서 유일한 고유식별자

	: class VS id
		: 우선순위 ) id > class > 태그
		: class
			: 한 페이지서 여러 요소에 중복해서 사용 가능한 스타일 정의법
				: 여러 요소서 중복해 사용 가능하단 소리는 여러 태그에 같은 class="특정값" 을 추가할 수 있단 소리
			: css 에서 적용하는 법 >> .class name{ 속성명1:값1; 속성명2:속성값2; ... }
			: ex) div class="post" , div class="post" , div class="post"  여러번 가능


		: id
			: 한 페이지 당 한요소에만 사용 가능한 스타일 정의법 << 근데 여러번 써도 오류 안나고 잘 되는것 같은디 ..?
				: 한 요소서만 사용 가능하단 소리는 단 하나의 태그에서만 id="특정값" 을 추가할 수 있단 소리 ( div id="num1" p id="num1" 처럼 태그명 당 한번만 쓸수 있단게 아니라, 찐으로 페이지 통틀어 한 요소에만 적용 가능한거임)(물론 각각 다른 id값을 한 페이지서 여러 요소에 부여 가능)
			: css 에서 적용하는 법 >> #id name{ 속성명:값1; 속성명2:값2; ....}
			: ex) div id="header" , div id="content", div id="footer"


			5. dir
				: 요소의 쓰기 방향을 나타내는 열거형 특성



			5. contenteditable << css 를 배우고 나서 다시 봐야될 듯
				: 자바 스크립트. CSS 등을 이용하여 요소를 편집 가능하게 해줌
			
				: 줄 수 있는 값은 
					(1) "true" 혹은 빈문자열(=아무값도안주기 혹은 "")
						: 요소가 편집 가능함
						: 원래는 이게 열거형 타입이지 불리언타입인건 아니라서 ㅏㄱㅄ을 할당하긴 해야되는데 contenteditable 이란 태그 내에서 특별히 아무값도 주지 않으면 빈 문자열로 인식하게 정의해둔것
						: ex) <label contenteditable></label>
					(2) "false"
						: 요소가 편집 불가함

				: 부모 요소의 contenteditable 값을 자식 요소는 자동적으로 상속받는다
					: 그러니까 밖의 태그에서 contenteditable="true" 라고 줬으면 내부 태그도 자연스럽게 (안보이지만) contenteditable="true" 되어서 수정이 가능해진다

				: input,  textarea 태그와의 차이점
					: contenteditable 의 경우 text 를 입력받으면 contenteditable 내부에 "요소 노드" 를 생성하는 반면에 input 이나 textarea는 텍스트노드만을 저장하기때문에 태그를 이용한 효과를 주지 못함.
					
				: 언제 input.textarea 쓰고 contenteditable을 쓸까
					: 일반 텍스트만을 사용하는 경우 input, textarea
					: 코드를 작성하거나 <b> , <u> 등을 이용해 글자에 효과를 주기 위해선 요소 노드들을 저장할 수 있는 contenteditable 을 사용해야된다

			6. data-* << 자바 스크립트 보고나서 다시 보자
				: 임의의 데이터가 HTML 과 DOM 사이에서 쉽게 오고 갈 수 있게 해준다 
				: 실제로 * 를 쓰는게 아니라 하이픈 뒤에 암거나 올 수 있단 소리
				: 일종의 html 의 변수 역할
				: dataset 속성이라고 한국어로 부른다
				






	: 전체 구조적인 sementic tag 
		: 태그명을 통한 역할 파악이 쉬우면서, <div>와 같이 웹 사이트의 구조를 설계하는데 쓰이는 태그

		: 어쩄뜬 얘네는 브라우져에 표시할 내용을 구분짓는 역할 하는거라 모두 body 내부에서 쓰인다. 
		1. header
			:헤더 영역(사이트 위에 있는 검색 창이나 메뉴바 같은거 있는곳), 그러니까 일종의 개요를 나타냄.
				: 본문( body) 의 맨 윗부분에 주로 적는다	 		
			: head 랑 다른 테그임 주의
				: head 는 메타 데이터를 대상으로 감싸는 태그고 , 필수적이며,  body 내부에 종속되어있지 않는다.

 
		2. nav 
			: 링크 거는 구간을 나타내기 위해 사용
				: <a>태그 같은거를 포함하게 된다.
			: 사용 위치는 본문( body나 artile의 내부) 어디서든, 여러개 활용해도 좋다. footer 내부 header 내부 다 상관 없다
			: NAVigation 의 약자

		3. main
			: 핵심 콘텐츠(내용)이 들어있는 태그.
			: 웹 페ㅔ이지마다 똑같이 들어가는 정보가 아닌 웹 문서마다 다른 내용으로 구성이 된다
			: 한 문서에서 한번만 사용 가능

			 
		4. article 
			: 독립적인 콘텐츠를 표시하기 위해 사용하는 태그. 
				: 그러니까 뉴스 사이트에서 특정 기사 하나. 유튜브에서 특정 영상 하나 느낌
			: section 으로 대체 가능하긴 함( 컨텐츠 구분용으로 쓸 수 있긴 함)


		5. section
			: 서로 관계있는 콘텐츠를 분리해 표시하기 위해 사용하는 태그
				: 그러니까 서론 본문 결론 같은거 혹은 1장 2장 3장 같은거. 컨텐츠 목차 느낌.
			: article 으로 대체 가능하긴 함(콘텐ㅊ, 구분용으로)
			: article 로 각각의 컨텐츠를 구분짓고, 이 article 을 각각 section 으로 감싸서 article 간의 목차(?) 그런 느낌으로 관계를 나타낼 수 있다. 

		6. aside
			:  사이드바 영역(왼 오 아래 바) 표기

		7. footer
			: 웹 문서 맨 아래쪽 콘텐츠 영역 표기

		: 전체 구조와 관련된 주요 non-semantic tag 
			<div>	
				: header, footer , section , nev 같이 구획을 구분하기 위해 사용했었음
				: sementic 태그가 등장하기 이전 많이 사용했었음. sementic 테그에 비해 직관적이지 않다. 하지만 속성을 추가하여 sementic 과 같이 직관적이게 할 수 있다(그래도 여전히 sementic 이 더 간단하고 직관적)
				: 속성
					1. id 
						: 해당 영역의 이름을 지음
						: ex) <div id="logo">
				: DIVide


	: 텍스트 관련 태그
		(1) hn
			: 제목을 나타낸다
				: 글자 크기가 다른 글자보다 크고, 굵게 나타나고, 자동 줄바꿈이 일어난다
			: h1 ~ h6 까지 가능하다
			: 제목을 나타내는 heading 을 줄여 h 라고 한거다

		(2) p
			: 단락을 구분할때 사용한다
				: 젤 앞 , 젤 뒤에 줄바꿈 한번씩일어난다
				: 아무리 많이 접촉하든 중첩해쓰든 줄바꿈은 한번만 일어난다
					: 예시 << 각 줄의 헤헤헤 사이는 모두 줄바꿈 한번만 동일하게 일어난다
					<p>헤헤헤</p><p></p>
					<p>헤헤헤</p>
					<p><p>헤헤헤</p></p>
					<p>헤헤헤</p>

		(3)br
			: 단순 줄바꿈이 필요할 때 사용한다
			: void element 라서 끝 태그가 없다
			: 물론 br 을 사용하여 웹 브라우져 화면상으론 p 와 같이 단락을 구분하는 효과를 낼 순 있으나 html 코드 상으로 단락을 구분시킨건 아니라 css 통해 단락 스타일을 적용시킬때 문제가 생기므로 단락을 구분하기 위해 줄바꿈이 필요한 경우엔 br 이 아닌 p 를 사용해라


		(4) q
			: 짧은 인용문 표시
				: 줄바꿈 없이(=inline element 이다) 인용문 앞뒤로 " 붙여진다
			: cite 속성으로 url 을 나

		(4) blockquote
			: 긴인용문 표시
				: 들여쓰기, 앞뒤 줄바꿈(=block element 이다)이 일어난다 && 쌍따옴표는 안붙는다
			: 중첩해쓰는 경우 들여쓰기는 누적된다(연결만하는건 소용없다)(줄바꿈은 누적안된다)	
	<blockquote>가나다라마바사</blockquote>
	<blockquote><blockquote>가나다라마바사</blockquote></blockquote>
	<blockquote></blockquote><blockquote>가나다라마바사</blockquote>

		(5).cite
			:인용문 출처 표시할때 사용
				: 기본적으로 기울이기 적용됨
			: blockquote 의 밖에 와야된다(내부에 안쓴다)
			: ex) <blockquote>늦었을때가 진짜 늦은거다<blockquote><cite>-박명수</cite>

		(6-0) strong
			: 해당 텍스트를 강조한다
				: 굵은 글씨로 표시된다.

			(6-1) b
				: 해당 텍스트를 별 의미없이 굵은 글씨로 표시하기만 한다
				: 외관상으론 strong 과 큰 차이가 없지만 screen 리더기에 읽히는게 다르다
					: strong 은 진짜 의미 자체를 강조하는거라 강조해서 읽어주고 , b 는 글씨만 굵은 걸로 표시한거라 별 효과 없이 읽어준다
				: Bold 의 줄임말


		(7-0) em
			: 해당 텍스트 강조
				: 기울인 글씨로 표시한다
			: EMphasis 의 줄임말

			(7-1) i
				: 해당 텍스트를 별 의미없이 기울이기
				: 외관상으론 em 과 별 차이 없지만 screen 리더기에 읽히는게 다르다
					: emphasis 는 진짜 의미 자체 강조 >> 강조해서 읽어줌 .근데 i 는 아님
				: Italic 의 줄임말(그러니까 이테리)	

		(8) small
			: 해당 글자를 작게 표시
				:" 부가세 별도 " 와 같이 별로 안중요한 텍스트인경우 자주 사용
		(9)sup
			: 위 첨자 표시
			: SUPerscript

		(10)sub
			: 아래 첨자 표시

		(9) code
			: 해당 부분이 코드임을 나타낼 때 사용하는 태그
				: 그렇다고 jsp 의 <%%> 처럼 해당 코드를 실행시키는건 아님

		(10) ins
			: (업데이트 사항에서) 새로 추가된 내용을 나타낼 때 사용하는 태그

		(11) del 
			: (업데이트 사항서) 삭제된 내용을 나타날 때 사용하는 태그
				: 텍스트 중간에 긴 가로선이 그어짐

		(12)  s 
			: 강조할 때 사용하는 태그
				: 텍스트 중간에 긴 가로선이 그어짐
				: 화면 상으론 del 태그랑 존나 똑같지만 둘이 다른거임
			: Strikethrough


	: 목록 관련 태그
		(1) li
			: 목록(하나)를 나타냄
				: 기본적으로는 동글뱅이 표식 생김 + 줄바꿈(=block element)
				: 들여쓰기는 자동적으론 안일어남
			: 단독으로 안쓰고 ol 이나 ul 과 같이 사용
			: LIst

		(2) ol
			: 순서있는 목록덩어리를 나타냄
				: li 태그 들에 들여쓰기 + 동글뱅이 순차화 기능을 적용함
			: li 태그 덩어리들을 감싸는 꼴로 사용됨
			: 속성
				1. type
					: 동글뱅이를 어떤 문자로 순차화 시킬건지 결정
					: 할당할 수 있는 type의 종류
						(1)  1
							: 숫자 1 , 2 , 3 ...
						(2) a
							: 소문자알파벳 a, b, c ...
						(3) A
							: 대문자알파벳 A, B, C ...
						(3) i
							: 소문자 로마자
						(4) I
							: 대문자 로마자

				2. start
					: 해당 문자타입의 시작 문자를 결정
					: 주의해야할 것은 알파벳 같은것도 "숫자" 입력이다
					: ex ) 
					<ol type="1" start="0">   >> 0,1,2,3,4.... 카운트
					<ol type="a" start="3">   >> c,d,e,f ... 카운트


 			: OrderedList 


		(3) ul	
			: 순서 없는 목록덩어리를 나타냄
				: li 태그들에 들어쓰기만 일어남(동글뱅이 표식은 그대로)
			: li 태그들을 감싸는 꼴로 사용됨
			
			: Unordered List

		(4)dt
			: Description List 의 name 부분을 정의
				: 기본적으로 줄바꿈 일어남(=block element)
			:반드시 dd와 쌍을 이루어야하고 dl 내부에서 써야됨
			: Description Term
			

		(5)dd
			: Description List의 value 부분을 정의
				: 기본적으로 앞에 들여쓰기 + 줄바꿈(=block element)
				: li 처럼 앞에 동글뱅이가 생기진 않음
			: dt 태그 다음에 따라오고, 하나의 dt 에 대응하여 여러개의 dd 생성 가능 
				: 여러개의 dd 생성이 가능하긴 하나 1:1 로 대응하여 쓰게 하는걸 추천한다고 함(스크린리더 사용자의 편의상)
					: 근데 여러개 써도 딱히 문제는 없음
			: Description-Description

		(6) dl
			: 설명목록 << 단어 사전과 유사
				: name 과 value 형태로 된 목록
			: dt 와 dd 의 한 쌍을 감싸는 꼴로 사용
				; 여러개의 dd 를 쓰는건 문제가 없는데 dt 는 한개여야된다. (그러니까 한 name 에 대한 뭉치 단위로 묶는거임)
			: Description List


	: 표 관련 일반 태그
		(1) caption
			: table 의 제목을 나타냄
			: 얘도 table 태그의 내부에 쓰는거 주의

		(2) tr
			: table 의 행을 나타냄
			: 행 단위로 셀을 나타내는 태그들을 감싼다
				: 그러니까 td 뿐 아니라 th 도 감싼다
			: Table Row

		(2) th
			: table 의 제목셀을 나타냄
				: 그러니까 해당 열의 제목 같은거 들어가고 실제 데이터는 안들어가는 셀들
				: 단순히 젤 윗행의 셀들만 가리는게 아니라 세로 셀도 그런 (?) 제목 셀인 경우 해당 셀은 th 로 생성한다( https://kin.naver.com/qna/detail.naver?d1id=1&dirId=1040205&docId=464133709&scrollTo=answer1# )
				: 기본적으로 텍스트 가운데 정렬 && 굵은 글자 표시된다

			: 속성
				: 사용 tip >> 합치기로 한 부분이면 합침 당하는 셀은 이미 표시한걸로 치는거다.( 그러니까 rowspan="2" 했으면 바로 아랫행의 해당 셀은 생략하고 나머지 셀만 정의하는거고 colspan="2" 했으면 해당 행의 바로 옆 셀은 생략하고 그 뒷 셀만 정의하는거다)
				1. rowspan
					: 행 합치기 (== 아래 방향셀이랑 합치기)
					: 값으로는 몇개의 셀과 합칠것인지 숫자를 (문자열의 꼴로) 할당
					: span ) 가로지르다. 포괄하다 << 합치다 라는 느낌
 
				2. columnspan
					: 열 합치기 (== 오른쪽 방향 셀이랑 합치기)
					: 값으로는 몇개의 셀과 합칠것인지 숫자를 (문자열의 꼴로) 할당
					
			: Table Head

		(3) td
			: table 의 셀을 나타냄
				: 실제로 유의미한 데이터를 나타내는 셀들
			: 속성
				: th 의 속성과 사용방법이 같음
				1. rowspan
					: 행 합치기 (== 아래 방향셀이랑 합치기)

				2. columnspan
					: 열 합치기 (== 오른쪽 방향 셀이랑 합치기)
			: Table Data
		
		(5) table
			: 표 table 의 구성
				: row(=행=가로찍), column (=열=세로찍) , cell(=셀=한칸) 으로 이루어진다

			: 예시
<a href="https://img.kr.news.samsung.com/kr/wp-content/uploads/2021/07/2021_2%EB%B6%84%EA%B8%B0_%EC%82%BC%EC%84%B1%EC%A0%84%EC%9E%90_%EC%8B%A4%EC%A0%81_%ED%91%9C-1000.jpg" alt="삼성전자 표"><h2>표2</h2></a>
	<table border="1">
		<caption>2021_2분기_삼성전자_실적_표</caption>
		
		<thead>
			<tr>
				<th rowspan="2" colspan="2">구분</th>
				
				<th colspan="5">2018년</th>
				<th colspan="5">2019년</th>
				<th colspan="5">2018년</th>
				
			</tr>
		
			<tr>
				<th>1Q</th>
				<th>2Q</th>
				<th>3Q</th>
				<th>4Q</th>
				<th>전체</th>
			
				<th>1Q</th>
				<th>2Q</th>
				<th>3Q</th>
				<th>4Q</th>
				<th>전체</th>
			
				<th>1Q</th>
				<th>2Q</th>
				<th>3Q</th>
				<th>4Q</th>
				<th>전체</th>
			</tr>
		</thead>
		<tbody>	
			<tr>
				<td rowspan="7">매출</td>
				<td>계</td>
				<td>60.56</td>
				<td>58.48</td>
				<td>65.46</td>
				<td>59.27</td>
				<td><%= 60.56 + 58.48+65.46+59.27%></td>
				
			</tr>
			
			<tr>
				<td>CE부분</td>
				<td>9.74</td>
				<td>10.4</td>
				<td>10.18</td>
				<td>11.79</td>
				<td><%= 9.74 + 10.4 +10.18+11.79%></td>
				
			</tr>
			
		</tbody>	
	</table>


		(6) col
			: (기본) 열 1개 단위로 열의 스타일을 결정
			: void element 라서 닫는 태그 없음 주의
			: 반드시  colgroup 내부에 써야됨
			: 쓸꺼면 모든 열에 대해 col 태그를 명시해야됨
				: 별도로 색깔 너비 같은거 정할 필요없는 열엔 <col> 적는다

			: 반드시 표의 내용이 시작하기 전에 써야됨(== caption 태그가 있다면 caption 태그 바로 다음에 써야됨 )

			: 합침당한열의 경우 해당 열의 젤 앞 셀의 특성을 따른다
			: 속성
				1. style
					:tip >> 문자열 내부의 끝에 모두 세미콜론을 붙인다
					(1) 배경색깔 지정>> "background-color:#색상;" 
						: 색상은 16 진수 형태의 rgb 값을 써야된다.
					(2) 열의 너비 지정>> "width:원하는크기px;"

				2. span
					:  똑같은 스타일을 적용시키고 싶은 열들(바로 뒷 열들의-그러니까 띠엄띠엄 함 안됨)의 갯수 적음
					: ex ) <col><col> == <col span="2">

		(7) colgroup
			: 한테이블의 col 태그를 묶음
			: 반드시 표의 내용이 시작하기 전에 써야됨(== caption 태그가 있다면 caption 태그 바로 다음에 써야됨 )


	: 표의 구조를 나타내는 sementic 태그
		(1) thead
			: 제목셀 행 전체를 나타냄
				: th 태그들을 감싸는 tr 태그(들)을 thead 가 감싸는꼴
			: Table HEAD

		(2) tbody
			: 데이터셀 행 전체를 나타냄
				: td 태그들을 감싸는 tr 태그들을 tbody 가 감싸는 꼴
			: Table BODY

		(3) tfoot
			: 해당 table 을 요약하는 맨 마지막 행을 나타냄	
				: 그러니까 th 태그들이 아닌 td 태그들을 감싸는 tr 태그 중 가장 마지막 tr 태그(들)을 tfoot 기 감싸는 꼴
				: 전체 데이터 셀 합계 평균 뭐 그런거 나타내는 맨 마지막 행
				: 근데 이런 역할이 없으면 tfoot 시멘틱 태그는 안쓰는거다. 없는데 맨 마지막 행이라고걍 가져다 붙이는게 아니다
			: Table FOOT
	
	: 이미지 관련 태그	
		: 웹에서 사용하는 대표적인 이미지 파일 형식
			: 파일의 용량이 크지 않으면서 화질이 좋아야됨
			: 종류	
				1. GIF Graphic Interchange Format
					: 움짤
					: 표시할 수 있는 생상이 최대 256가지로 다른 파일 형식들에 비해 색상 표현이 제한적인 편
					: 파일의 사이즈(용량이 아니라 가로 세로 그런거)가 작은편

				2. JPG / JPEG Joint Photographic Experts Group
					: 이미지를 수정하고 저장하는 작업을 반복할 경우 화질이 떨어질 위험 있음				
				3. PNG Portable Network Graphics << JPG/JPEG 보다는 추천
					: 네트워크용으로 개발된 파일 형식
					: 투명한 배경도 만들 수 있음
					: 웹에서 가장 많이 사용되는 형식

		: 이미지 파일들을 해당 디렉터리 내부에 파일 단위로 쌩으로 담아두기 보다는, 해당 디렉터리 "내부"에 이미지 전용 "하위" 디렉터리를 만들어 거기에 저장하고 꺼내쓰길 추천
			: 해당 디렉터리 내부에 이미지 전용 디렉터리를 만드는거니까 상대경로로 쉽게 접근 가능
				: ex) 해당 디렉터리 내부에 images 란 하위 디렉터리 만들고 coldEcomony.jpg 란 파일 저장해놨음 "images/coldEconomy.jpg"로 접근 가능( 상대경로니까 젤 앞에 "/" 안붙음 주의)

		: img
			:  속성
				1. src
					: 이미지 파일의 경로를 지정
						: 인터넷 url, 컴퓨터 내부의 경로 모두 가능
				2. alt
					: 이미지가 깨질 시 표시할 문자열 설정 && 스크린 리더기가 읽을 문자열 설정
					: (이미지를 어떠한 용도로 쓴게 아니라 그냥 페이지 꾸미는 용도로 쓴거라서) 별달리 쓸 내용이 없어도 alt="" 로 표기 가능하고, 최대한 사용하라고 추천되는 편이다.
						: 스크린 리더기 는 alt 가 "" 인 경우 별달리 해석할 필요가 없어지고, 브라우져 상에서는 꺠진 사진 이모티콘도 표기할 필요가 없어진다
				3. width
					: 너비 조절 || 전체 비율 유지하며 크기 조절 
						: 만약 height 와 같이 쓰이지 않고 단독으로 쓰인 경우 비율을 유지하며 해당 값만큼 너비&&높이 조절
					: 단위
						: tip << 브라우져 크기 조절 따라 크기가 변하는 이미지를 넣고 싶음 %를 사용하고, 브라우져 크기에 상관 없이 항상 크기가 일정한 이미지를 넣고 싶으면 px 써라
						(1) % 퍼센트 
							: 현재 열린 웹 브라우져 창의 크기를 기준으로 이미지 크기를 결정
								: 그러니까 탭 위의 □ 클릭해서 쌍(?) 네모 로 만들고 ↔ 로 브라우져 창 크기 조절하면 이미지 크기가 바뀐다

						(2)  px 픽셀
							: 이미지를 해당 픽셀 크기로 표시
							: 별달리 단위를 명시하지 않고 숫자만 띡 쓰면 기본 px단위가 적용됨
							: 참고로 1 픽셀은 눈에 보이는 쩜 크기. 5 픽셀은 난쟁이 커서 크기

				4. height
					: 높이 조절
					: 비율 맞출 자신 없음 쓰질 말고 걍 width 만 써라
 
	: 멀티미디어 관련 태그
		: 멀티미디어 파일의 종류
			(1) 비디오 
				1. mp4 << 추천
				2. webm << 비추천(일부 웹 브라우져서 지원을 안함)
			(2) 오디오
				1. mp3 << 추천 
				2. mp4
				3. m4a
		
		(1) 다양한 멀티 미디어 파일을 삽입할 때 사용 
			: 가능한 멀티미디어
				(1) 오디오 파일
				(2) 비디오 파일
				(3) pdf >> pdf 리더기가 자동 추가된다
				(4) 자바 애플릿
		1. object
			: 다양한 멀티 미디어 파일을 삽입할 때 사용
			: img 태그와 다르게 void element 가 "아님"을 주의

			: 속성
				(1) data << 필수
					: 파일의 경로를 할당함
					: img 와 다르게 src 가 아니라 data 임을 주의
				(2) width
					: 너비 결정
				(3) height
					: 높이 지정

		2. embed
			: 다양한 멀티미디어 파일을 삽입할 때 사용
			: HTML 초기 버전부터 사용된 태그 << object 보다 더 잘쓰임
			: 속성
				(1) src
					: 멀티미디어 파일의 경롤 할당
				(2) width 
				(3) height

		(2) 특정 멀티미디어 파일을 삽입할 때 사용
			: 컨트롤 바
				: 오디오나 비디오 파일을 시작하거나 종료할 수 있는 구성 요소
				: 쉽게 말해서 재생, 중지 할수 있는 버튼 있는 바를 의미한다

		

		1. video
			: 비디오 파일을 삽입할떄 사용
			: 주의해야할게 src 통해서 띡 파일을 넣었다고 재생할  수 있는게 아님. 최소 controls 가 있던가 아님 대신 autoplay&muted 가 있던가 해야됨
				: 진짜 ㅈㄵㄵㄵㄵㄴ 주의해야할게 대부분의 브라우져의 경우 "순수" 자동재생이 금지되있어서 autoplay 만 마크업 하면 자동재생이 안된다. 자동재생을 원하면 반드시 autoplay속성뿐 아니라 muted  속성도 함께 마크업 해야된다. 
					: 뭐 생각해봄 그럴만두 한게 웹 사이트 열었다고 갑자기 소리 나면 당황할 수 있으니까 

				(1) src : 파일의 경로 할당
				(2) controls 
					: 컨트롤 바 표시 
						: 재생 , 일시정지, 음소거 등이 가능해진다
					: boolean 속성이라서 단순 쓰기만 함 ("true")됨
					: autoplay, loop, muted 와 함께 사용 가능하다 
						: 물론 이때도  autoplay 는 반드시 muted 와 함꼐 쓰여야된다
						: muted와 함께 쓰인 경우 컨트롤 바의 버튼을 이용해 (원하면) muted 상태를 해제 가능하다

				(3) autoplay
					: 자동재생기능
					: 반드시 muted 와 함께 써야됨 (안그럼 자동재생 효과가 없음)
					: booelan 속성

				(4) loop
					: 반복재생
					: boolean 속성
					
				(5) muted
					: 음소거
					: boolean 속성

				(6) width , height
					: 크기 조절
					: % 사용가능 << 웹 브라우져의 크기에 맞게 크기 자동 조절되므로 추천
				(7) poster
					: 비디오가 재생되기 전까지 표시할 "이미지"의 경로 할당 
						: 그러니까 미리보기 화면으로 할 파일의 경로 할당하는 거임
					:  audio 태그엔 이 속성 없는거 주의

		2. audio
			: 오디오 파일을 삽입할 때 사용
			: 속성) video 태그의 "poster" 속성이 "없는" 것 뺴고는 video 태그와 존똑인 속성을 가지므로 생략



		: 플러그인 plug-in  프로그램
			: 웹 사이트서 멀티미디어 파일을 재생할 수 있게 해주는 프로그램
			: HTML4 까지는 웹 브라우저에 멀티미디어 파일을 바로 재생하진 못하고, 이를 재생하기 위해 별도의 프로그램이 따로 필요했지만 HTML5 부터 웹브라우져서 바로 멀티미디어를 재생할 수 있기 때문에 이제 더이상 플러그인 프로그램을 사용하지 않는 추세  
			: 대표적인 프로그램) Adobe Flash Player
				:chrome에서는 지원이 완전 중단됨

	: 기타 태그
			1. abbr
				: 주로 줄임말을 나타날 때 사용하는 태그
				: title 속성과 함께 씀
					: 커서 호버 했을때 글자 나타나게 하는거
					: 근데 좀 불편한건 밑에 쩜쩜쩜 밑줄 생김
				: ABBReviation (== 약자, 생략어)




					

	: HTML 구조
		<!DOCTYPE HTML>	
			: 웹 문서 유형 지정 
			: void element 태그
		<html> , </html>
			: 웹 문서의 시작과 끝을 나타낸다
			: 속성 
				lang : 웹 문서에서 특정언어로만 사용을 제한할떄 사용한다 << 쓰는거 잘 못봤다

		<head></head>
			: 웹 브라우져가 웹 문서를 해석하는데 필요한 정보들을 입력한다
				: head 태그 사이에 입력하는 주요태그
					1. title
						: 웹 브라우져의 탭에 뜰 문자열을 시작 끝 태그 사이에 적는다
					2. meta
						: 메타 정보 == 데이터에 대한 데이터. 그러니까 데이터에 대한 부가적인 정보를 의미한다
						: void element 이다
						: 속성 
							1. charset << 필수
								: html 파일을 웹 브라우져로 인코딩하는 방식을 지정한다
									: 근데 주의해야할게 이건 말 그대로 html 파일을 웹 브라우져로 인코딩하는 방식만 지정해준거지, 서블릿 파일 등에서 html 파일로 인코딩하는 방식은 해당 서블릿 파일서 또 따로 지정해줘야한다(안그럼 HTML 파일로 이상하게 인코딩된 문자가 오기 때문에 마지막에 HTML 파일서 그 이상한 문자를 아무리 UTF-8 로 읽어도 이상하게 나온다)
 								: charset 의 값으론 UTF-8 , EUC-KR 등 여러가지 있으나 대부분 UTF-8을 할당하는 편이다


							2. content
								: 메타데이터로 저장할 내용을 값으로 한다
								: 혼자 쓰면 아무 소용 없고 name 속성과 함꼐 써서 해당 content 값에 이름을 매핑 시켜놔야 사용이 가능하다
							3. name 
								: 메타데이터에 이름을 매핑한다. 
								: charset 만 쓸꺼면 필요없지만 content 쓸껌 써야된다.						

		<body></body>
			: 실제로 웹 브라우져에 나타내ㅏ는 부분이다

웹 서비스의 동작 방식
	: 클라이언트 <--> web server <--> web application server <--> db
		: 클라이언트 == 웹 브라우져
			: 클라이언트는 web server와만 직접적으로 통신함.
				: 어떤 파일을 달라고 web server 에게 request하고
				: 어떤 파일을 web server에게 respond 로 받음

		: web server ) 클라이언트와 직접적으로 request 를 받고 respond 를 보냄
			: 단순하게 (자신이 가지고 있던 혹은 was 로부터 받은) 파일을 요청에 따라 전달해주는 것밖에 없음
				: 머리를 안쓰는 얘임
				: 정적 처리를 한다




		: WAS )
			: 웹 서버가 	요청한 파일을 (필요에 따라 데이터 베이스와 통신해) 만들어서 web server 에게 넘겨준다
				: 머리를 쓰는 얘임
			: 웹 컨테이너를 가지고 있다
				: 웹 컨테이너에서 동적 처리를 한다.
					: 동적처리 ) jsp 파일을 servlet 파일로 변환
			:  왜 필요>> 상식적으로 naver 만 해도 사용자가 4000만명 대인데 4000 만명에 대한 4000만개의 웹 페이지를 일일 이 만들어 놓긴 무리임.  하나의 웹 페이지만 만들어 놓고 해당 사용자따라서 다르게 해당 웹 페이지에 데이터를 넣어서 그 사용자에 대한 웹 페이지를 생성하는 거임

html 
	: 정적 웹 페이지 작성을 위한 markup language
	: 기본적으로 웹 서버는 HTML 형식의 파일을 읽어 브라우져에 표시한다
jsp , servlet
	: 동적웹페이지 작성을 위한 언어

	: servlet
		:자바 기반이고 class 라서 소스코드는 .java 이고 , 컴파일시 .class 바이트코드 파일이 생기고 이걸 실행하는거다.
		: jsp 와 다르게 별도 위치가 지정되있지 않다. 어차피 .class 파일만 참조하기 떄문. 그러니까 servlet 을 컴파일한 클래스 파일의 위치가 매우 중요. 이 파일은 WEB-INF 폴더 내 classes 란 파일에 무조건 존재해야됨.

	: jsp 
		:servlet 파일로 변환되어 실행된다.
		: 보통 webapp 파일 바로 아래에 오는게 일반적이다.
			: 예외 ex) 로그인실패시 띄울 jsp 파일은 /webapp/WEB-INF 아래에 존재

웹 서버들은 기본적으로 HTML 파일을 읽어서 그 내용을 화면에 띄우게 되어있다
	: servlet 파일이든 jsp 파일이든 그 자체로만은 어떤 실행하고자 하는 모양, 형식 같은게 안나오고 그냥 코드만 그대로 나온다>> servlet 파일, jsp 파일 등을 읽기 위해서는

apache 아파치
	: 세계에서 가장 많이 쓰는 웹 서버 중 하나
		: 거의 모든 운영체제(리눅스, 윈도우, macOS)에서 사용가능하고 다양한 추가기능이 있기 떄문
	:  HTTP 웹서버. 
		: 클라이언트로부터 HTTP 요청을 받고, 요청을 처리하고, HTTP 응답을 반환한다,

tomcat
	: apache 와 웹 컨테이너를 모두 가진 소프트웨어. << webserver+ WAS
		: 클라이언트로부터 요청을 받을 수 있고 응답을 반환할 수 있으며 필요에 따라 동적 처리를 할 수 있다
	: 파일계층구조
		: Java Resources
			: 웹 상 주소로 접근할 수 없다.
		: Web Content
			: 웹 상 주소로 접근할 수 있따.
				: 클라이언트가 url 을 통해 접근 가능하다
		: /워크스페이스/프로젝트명/src/main/webapp
			: webapps
				: Tomcat 서버의 최상위 폴더
				: jsp 파일과 html 파일(웹 브라우져에 표시할 페이지), 사용할 이미지나 음원 파일등 이 저장된다
				: /META-INF 와 /WEB-INF 를 포함
					: /WEB-INF >> web.xml 포함
						: web.xml >> 기본 작성값은 tomcat 최상위 폴더에 위치한 config 폴더에 존재하고, 이 파일을 복사하여 만들어진 파일이 web.xml 이다.

		: /톰켓설치디렉터리/work/catalina/localhost/프로젝트명/org/apache/jsp
			: jsp 디렉터리
				: jsp 로부터 변환된 .class , .java 파일을 포함함
					: 그러니까 jsp 파일 실행 >> .java 파일 생성 (==servlet 파일 변환 )>>  .java 실행 >> .class 생성 (==servlet 파일 컴파일)>> .class 실행 (==servlet 파일 실행)

		: default output folder == /프로젝트명/bulild/classes
			: 바이트코드 파일들(자바소스 코드 파일들을 컴파일한 파일들)이 잠시 저장되는 디렉터리. 
			: 이클립스 상에선 classes 폴더가 안보인다.
			: 서버 통해 실행하면 bulid/classes 안의 바이트코드 파일들이 모두 webapp/WEB-INF  로 '복사된다'
				: tomcat이 클래스를 지정할때 web-inf/classes 를 핊요로 하기 때뮨

정적 페이지 vs 동적 페이지
	: 정적페이지>> 메모장처럼 그 내용이 변하지 않는 웹 페이지
		: 웹 서버에 이미 저장된 html 문서를 클라이언트에게 전송하는 것
		: 서버에서 해당 html 문서를 수정하기 전까지 않는 이상 그 내용이 변하진 않음. 
		: 클라이언트 마다 같은 결과의 웹 페이를 받음
		: ex ) 홈페이지의 회사 소개 페이지. 이력서 등

	: 동적페이지>> 다른 변수들에 의해 내용이 시시때때로 변하는 동적인 웹페이지
		: 세계시간 같은거 보는거
		: 요청 정보를 처리한 HTMl 문서를 클라이언트에게 전송하는 웹 페이지
		: 같은 페이지라도 사용자마다 다른 결과의 웹 페이지를 서버에 요청하고 받을 수 있음
		: 홈페이지 게시판 등

왜 걍 html 을 쓰지 않고 servlet 이나 jsp 를 쓰는가
	: html 은 정적인데 servlet 이나 jsp 는 동적 웹페이지 생성을 가능하게 해준다.

Servlet
	: java 기반이다 >> 확장자가 .java 이다
	: print 함수를 통하여 html 코드를 클라이언트에게 출력한다, 
	
Jsp
	: HTML 기반이지만 내부적으로 java 코드가 삽입된다 >> 확장자가 .jsp 이다

WAS Web Application Server
	: tomcat 이다. 
		: 웹 컨테이너를 가지고 있는데 Web  server 에서 동적처리가 필요하면 해당 파일을 찾아 웹 컨테이너에서 변환 작업을 진행한다. 브라우저에서 jsp 파일을 요쳥했다면 해당 파일을 servlet 으로 변환하고, 컴파일된 결과를 웹 서버로 전달하고, 사용자가 servlet 파일을 
	: 웹 서버의 서비스들은 기본적으로 HTML 파일을 읽어 브라우저에 표시하게 되어있다
