웹 서버와 jsp 

웹 서버와 클라이언트의 상호작용
	: 클라이언트 > 서버에 특정 웹페이지를 request
	: 서버 > 해당 웹페이지를 response

정적 페이지 : 
	: 서버에 미리저장되어있다
	: 주로 HTML , CSS , JS ,이미지 로 구성되어있다

동적 (웹) 페이지 : 서버에 미리 저장된 파일이 아닌, 서버에 있는 데이터들(db에서 읽어서)로 가공해 새로 생성되는 페이지. 
	: ex ) 이메일 , 게시판 ... 
	: 구현 위해 필요한 것 >>  데이터베이스 : 사용자의 정보를 읽어오기 위해선 DB 가 필요
	: 대부분의 웹 페이지는 "동적 페이지" 이다.



 
서버사이드  server-side : 서버 측에서 수행하는 처리
	: 서버사이드 스크립트 언어 : Java, PHP , Python .. 
	: SSR Server Side Rendering : 페이지 랜더링을 서버 쪽에서 다 해서 response 함

클라이언트사이드  client-side : 클라이언트 측에서 수행하는 처리
	: 클라이언트사이드 스크립트 언어 : JS
	: CSR Client Side Rendering : 최종적인 페이지 랜더링을 클라이언트 쪽에서 함


SEO Search Engine Optimization 검색엔진 최적화 : 사용자들에게 양질의 검색 결과를 상위 노출 시키는 것.



웹 서버 : "동시"에 "여러" 사용자를 서비스 한다


	



CGI Common Gateway Interface 
	: https://velog.io/@reasonoflife39/CGICommon-Gateway-Interface-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%EC%9B%B9-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%A5%BC-%EB%8F%99%EC%A0%81%EC%9C%BC%EB%A1%9C-%EB%A7%8C%EB%93%9C%EB%8A%94-%EA%B8%B0%EC%88%A0
	: https://live-everyday.tistory.com/197
	: "웹 서버"와 "외부 프로그램(CGI 스크립트)" 간의 통신을 할 수 있게 해주는 규약 혹은 인터페이스
	    : CGI 스크립트 ( CGI 프로그램 ) >>  CGI 규약을 따라 웹 서버와 상호작용하게되는 외부 프로그램
		: Perl, Python, C 등 다양한 프로그래밍 언어로 작성될 수 있음
		: DB 접근 등의 역할을 수행함

	: 사용자의 요청에 따라 "서버"에서 동적인 웹 페이지를 생성하거나 데이터를 처리하는 데 사용됨
	: request 마다 "프로세스" 를 생성하여 부하가 매우 크다.
	******해결방안: "프로세스" 가 아닌 "쓰레드"를 사용하자 >> 그래서 나온게 servlet
			: 그러니까 옛날 서버사이드 랜더링 방식은 CGI 였고, 요즘은 servlet 이다.
		: CGI vs Servlet
			: 공통점 >> 둘다 동적인 컨텐츠를 생성하기 위해 사용됨
			: 차이점 >>
				: CGI --> 다양한 언어로 작성 가능. 요청마다 프로세스 단위 처리.
				: servlet -->  자바 언어로만 작성 가능. 요청마다 쓰레드 단위 처리.

	: 처리 흐름
		1. 클라이언트가 Http Request를 서버로 보냄
		2. 서버가 이를 받고, CGI 스크립트 호출
		3. 호출된 CGI 스크립트가 DB 등에 접근하여 정보얻어내고, 서버에 결과를 반환함
		4. 서버는 반환된 결과를 클라이언트에게 HttpResponse 로 보냄




CPU 와 IO
	: CPU 는 빠르고, I/O 는 느리다. >> CPU 의 속도는 I/O의 100만배이다.
	: CPU Central Processing Unit
		: 컴퓨터의 중앙 처리 장치로, 모든 연산과 명령어 실행을 담당. 컴퓨터의 '두뇌'.
 		: 구성 >> 레지스터(고속메모리)+ ALU + CU
		: 작업 단위>> 프로세스나 쓰레드 단위
		: 작업 속도 >> 매우 빠르게 동작.
			: CPU 바운드 작업은 주로 계산과 관련된 작업이지, I/O 작업이 거의 필요하지 않기 떄문.
				:  CPU 바운드 작업 == CPU 에 큰 부하를 주는 작업

	: I/O Input/Output 
		: 컴퓨터와 외부 환경 간의데이터 교환을 담당하는 장치 및 시스템으로. CPU에게 처리해야 하는 데이터를 제공하고, CPU의 처리 결과를 사용자에게 전달한다.
		: 입력장치는 키보드같은거. 출력 장치는 모니터 같은거.
		: 작업 단위 >> 데이터 블록 단위로
		: 작업 속도 >> 매우 느리게 동작.
			: I/O 바운드 작업 주로 데이터 읽기/쓰기와 관련된 작업이라, 속도가 많이 느림.
				:  I/O 바운드 작업 == I/O 에 큰 부하를 주는 프로그램

******: CPU와 I/O의 속도 차이 국복 >> 멀티쓰레딩을 통해 CPU가 I/O 대기 시간 동안 다른 연산을 수행하도록 할 수 있다.



프로세스와 쓰레드
	: 프로세스 process >> 운영체제로부터 자원을 할당받은 "작업의 단위" . 컴퓨터에서 돌아가고 있는 프로그램 하나.
		: (정적) 프로그램 Static Program >> 컴퓨터에서 실행 할 수 있는, 하지만 현재 실행 중이진 않은(= 파일이 저장 장치에 있지만 메모리에는 올라가 있지 않은 ) 파일. 그러니까 코드 덩어리.


		: 프로세스 >> 컴퓨터에서 작업 중인, 돌아가고 있는 (= 메모리에 적재되고 CPU 자원을 할당받아 실행되고 있는) 프로그램. 그러니까 코드 덩어리를 실행한 것.
			: 작업관리자에서 확인가능
			: 모든 프로그램은 메모리 공간을 할당해 줘야 실행될 수 있다 >>  프로그램 파일이 컴퓨터 메모리에 올라가고, 운영체제로부터 시스템 자원(CPU)을 할당받고서야 실행된다.

		
		: 프로세"서" >> CPU 와 같은 하드웨어. 프로세스를 실행시키는 주체.

		: 프로세스의 자료 구조 >> 
		    : 코드/데이터 영역은 "정적"영역  이지만, 스택/힙영역은 "동적"영역(=프로그램이 실행되는 동안 늘었다 줄었다 한다 .) 이다.
		    : 암기 tip >> SHCD 씁하시다
			(1) 코드 영역 : 작성한 프로그래밍 코드가 기계어의 형태(= cpu가 해석 가능한 형태)로 저장되어있다
			(2) 데이터 영역 : 코드가 실행 중 사용되는 전역 변수 또는 static 변수 등의  각종 데이터가 저장되어있다.
			(3) 스택 영역 :  속한 함수의 종료와 함께 삭제시킬, 지역 변수와 같은, 임시적인 자료를 저장하는 공간
				: stack 은 함수 호출마다 할당(생성)되며, 함수 소멸과 함께 소멸됨.
				: stack 영역 초과 시 stack overflow 에러 발생

			(4) 힙 영역 : 프로그래머가 필요할 때마다 사용하는 메모리 영역. 객체 같은 데이터가 저장되는 공간.
				: 사용자에 의해 메모리 공간이 동적으로 할당되고 해제됨

		:  각 프로세스는 별도의 메모리에서 실행되기 때문에, 기본적으론 프로세스 끼리는 다른 프로세스와 공유하는게 없고, 서로의 메모리에 직접 접근할 수는 없다.


	: 스레드 thread >> 하나의 프로세스 내에서 동시에 진행되는 작업 갈래, 흐름의 단위. 하나의 프로세스가 할당 받은 자원을 이용하는 실행의 단위.
		: 크롬의 경우 노래 감상과 파일 다운등의 서로 다른 작업을 동시에 진행할 수 있다. 
		: 멀티(다중) 스레드  >> 하나의 프로세스 안에 여러 스레드가 존재하는 것.

		: 자료 구조 >>  스레드 마다 별도의 stack 영역을 가진다. 
			: 스레드에게 code, data , heap 영역은  따로 없고, 자신이 속한 프로세스의 영역을 사용한다. 그러니까 같은 프로세스에 속한 스레드 끼리는 , 프로세스의 자원( code, data , heap )을 공유하게 된다.
			: 독립적인 stack 을 가진다 == 독립적인 함수 호출이 가능하다 == 스레드별로 독립적인 실행 흐름을 가질 수 있다. >> 자원의 생성과 관리의 중복성을 최소화하여 수행 능력이 향상된다.
		: 주의 ) CPU의 쓰레드 != 프로세스의 쓰레드
			:  CPU의 쓰레드 >> 하드웨어적 스레드
			: 프로세스의 쓰레드 >> 소프트웨어적 스레드


멀티 프로세싱 vs 멀티 태스킹 vs 멀티 스레딩
	: https://sorjfkrh5078.tistory.com/56
	: 멀티 프로세싱 >> 여러 프로세"서"(cpu) 를 사용하여 하나의 프로세"스"를 병렬 처리하는 것.
	: 멀티 태스킹 >> 하나의 CPU에서 여러 프로세스(프로그램)을 동시에 실행하는 것.
		:  운영체제의 스케줄링에 의해 "번갈아 가며" 수행하여 다수의 task 를 처리 하는 것처럼 보여지게 된다.
	: 멀티 스레딩 >> 하나의 프로세스 내부에서 여러 스레드가 돌아가는 것.


멀티 태스킹 multi tasking :  하나의 CPU에서  여러 프로세스를 동시에 실행하는 것.
	: 하이퍼스레딩(Hyper-Threading) 기술 >> 하나의 유닛이 논리적으로는 n개의 유닛 역할을 수행하는 것. 멀티 태스킹을 구현하는 방법.
		ex ) 4코어 8쓰레드 CPU : 물리적으로는 코어를 4개를 가지지만, 논리적으로는 8개의 코어를 가지는 CPU. 그러니까 하나의 물리적 코어가 2개의 코어 역할을 수행하는 CPU.
		: 코어 >> 명령어를 메모리에서 뽑아 해석하고 실행하는 반도체 유닛

	:  수십수백개의 프로세스들을 고작 n개의 논리적인 스레드도 어떻게 처리하는 걸까 >> CPU 의 특성인 병렬성(Parallelism) 과 동시성(Concurrency) 때문
	1. 병렬성 Parallelism >> 각 코어는 병렬적으로 작업을 수행. (정말로) 동시에 처리.
	2. 동시성 Concurrency >> 둘 이상의 작업이 동시에 실행되는 것"처럼"보이도록 작업들을 스위칭 하며 처리.
		: CPU 자체는 한번에 하나의 프로세스만 실행 가능하다.
	ex ) 1개의 코어가 있고 4개의 작업이 있다고 가정: 하나의 코어가 프로세스들을 ​계속 번갈아가면서 조금씩 처리함으로써, 마치 4개의 프로그램이 동시에 실행되는 것 처럼 보임. 






프로세스 상태 : 프로세스가 생성되고, 실행 종료하기까지 크게 다음과 같은 5가지 상태를 가진다.
	: OS 의 "프로세스 스케줄링"에  의해 상태가 전이되게 된다. 
		: 운영체제 >> 프로세스와 스레드의 생명주기를 관리하여, 시스템 자원을 효율적으로 사용하게 한다.
		: 프로세스 스케줄링 >>  운영체제가 프로세스를 선택하여, CPU 를 할당하는 작업
			: CPU 를 할당하는 순서는 다양한 알고리즘을 통해 정해짐

	(1) 생성 new : 프로세스가 생성된 상태.
	(2) 준비 ready: 프로세스가 실행 대기 중인 상태. 언제든지 CPU를 할당 받을 수 있는 상태.
	(3) 실행 running: 프로세스가 CPU를 할당받아 실행 중인 상태
	(4) 대기 waiting : 프로세스 실행 중 특정 작업이 끝나기를 대기하는 상태
		: 그러니까 "입출력요청" 과 같은 "특정이벤트" 가 발생하여 대기타는 상태
		: 이 상태 동안은 CPU 를 할당 받지 못한다
		: 해당 이벤트를 마치면, 다시 ready 상태로 전환된다. (다시 cpu 할당 받기를 대기타게된다.)
	(5) 종료 terminate : 프로세스 실행을 완료하고 종료된 상태. 메모리에서 제거되는 상태



컨텍스트 스위칭 Context Switching : CPU가 한 프로세스에서 다른 프로세스로 전환할 때 발생하는 일련의 과정
	:  동작 중인 프로세스를 중지하고 다른 프로세스를 실행하기 전,  해당 프로세스의 상태(Context)를 보관하고, 실행할 다른 프로세스를 실행하기 위해 context 에 보관해두었던 해당 프로세스의 상태를 복구하는 작업.

	: PCB Proccess Control Block 이란 자료 구조로 보관(저장)이 된다.
		: PCB >> Pointer( 프로세스의 현재 위치) + Process state + PID ... 등의 구성으로 이뤄짐.

	: Context Switching Overhead >> 프로세스 스위칭 하는데 비용이 많이 드는 것.
	


스레드 상태 : 스레드가 생성되고, 소멸되기 까지 크게 담과 같은 4가지 상태를 가짐
	: OS 의 "스레드 스케줄링"에  의해 상태가 전이되게 된다. 
		: 스레드 스케줄링 >>  운영체제가 스레드를 선택하여, CPU 를 할당하는 작업
			: 스레드 스케줄링은 하나의 프로세스 내에서 다수의 스레드가 동작하는 형태이기 때문에, 프로세스 스케줄링과는 다르게 스레드 간의 상호작용과 동기화 문제까지 고려해야 한다

	(1) new : 스레드가 생성되고 아직 호출되지 않은 상태 
	(2) runnable : 스레드가 실행 대기 중인 상태 . 언제든지 cpu 를 할당 받을 수 있는 상태
	(3) blocked : 스레드 실행 중 특정 작업이 끝나기를 대기하는 상태
		: "입출력요청" 과 같은 "특정이벤트" 가 발생하여 대기타는 상태
		: 이 상태 동안은 CPU 를 할당 받지 못한다
		: 해당 이벤트를 마치면, 다시 runnable 상태로 전환된다. (다시 cpu 할당 받기를 대기타게된다.)
	(4) terminate : 스레드가 실행 완료하고 종료된 상태. 메모리에서 제거된다.


스레드 컨텍스트 스위칭 Thread context switching : 멀티 스레딩 환경에서, 하나의 프로세스 내의 스레드들의 실행을 전환하는 기술
	: 스레드는 TCB Thread Control Block 이란 자료구조로 보관 (저장) 이 된다.
		: TCB 는 PCB 안에 들어있다. 스레드가 프로세스 내에 위치한 것처럼.
		: 컨텍스트에 저장할 때 뿐 아니라, 스레드 간의 자원 공유 및 동기화 할 때도 해당 자료구조를 하용한다.

