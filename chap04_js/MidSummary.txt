구조적 프로그래밍 vs 절차지향 프로그래밍 언어 vs 객체 지향 프로그래밍 언어 vs 함수형 프로그래밍 언어
	: 구조적 프로그래밍
		: 기능을 중심적으로 개발하는 언어

	: 절차지향프로그래밍 언어
		: "순차적으로" 처리하는 언어
		: 함수만 있음

 	: 객체지향프로그래밍 언어
		: object 단위로 처리하는 언어
		: 추상화 캡슐화 상속성 다형성의 특징을 가짐
		: 함수와 객체가 있음
		: 클래스가 일급객체가 된다.
			: 일급 객체 >> 걍 일반적인 객체를 말하는 거임

	: 함수형 프로그래밍 언어, 비절차형 프로그래밍 언어
		: "순수 함수"를 사용하여 처리하는 언어. 	
			순수 함수 ) 동일 입력값에 대해 항상 동일 리턴값을 반환하며 외부 영향을 받지 않는 함수. 그러니까 side effect 가 없단 말.

		: 실행 순서를 지정할 필요가 없다
		: 함수 "자체" 가 일급 객체 가 된다.




스크립트 언어 : 이미 존재하는 소프트웨어를 제어하기 위한 용도로 사용되는 언어
	: 소스 코드를 컴파일(Compile)하지 않고도 실행할 수 있다.
	: 스크립트 언어 ⊂ 인터프리트 언어
https://velog.io/@jkijki12/%EC%BB%B4%ED%8C%8C%EC%9D%BC-%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8



자바스크립트
	: "동적인" 웹 페이지 작성을 위한 언어
		: 동적인 속성 변경. 이벤트에 반응하는 동작 구현. 콘텐츠 동적 변경. 상호 대화적인 콘텐츠 구현.
	: "모든" 웹 브라우져는 자바 스크립트를 지원
	: 점점 중요성이 커지고 있다
	: 자바스크립트 != 자바	
		: 공통점 >> 객체 지향을 지원한다.
		: 자바
			1. jvm 위에서 실행된다
			2. 컴파일 언어  : 번역 시간과 실행 시간이 별개이다.
			3. 객체 지향 언어
			4. 변수의 타입 선언 "반드시" 필요

		: 자바스크립트
			1. 브라우저 위에서 실행된다
			2. 인터프리터 언어. 스크립트 언어 : 번역과 실행이 동시에 일어난다.
			3. 구조적 프로그래밍, 함수형 프로그래밍, 객체지향 프로그래밍 , 객체 지향 프로그래밍 "기능"을 지원
				: 객체 지향 언어 != 자바 스크립트  
				: 함수 자체를 객체로 한다
				: 람다식도 지원한다

			4. 변수의 타입 선언 없어도 사용 가능

	: BOM  Browser Object Model 브라우저 객체 모델
		: 브라우져와 관련된 객체들의 집합
		: 최상위 객체 == window



	: DOM Doucument Object Model 문서 객체 모델
		: 웹페이지 (html , xml 문서 등)를 구조화 시켜 활용 가능한 객체(object) 형태로 만든 일종의 web api. 인터페이스.
	

		:  DOM ⊂ BOM
			: DOM 은 window 객체의 하위 객체 이다

		: tree 자료구조를 가진다. 계층적으로 표현된다.
			document 노드 : 최상위 "루트" 노드 
				: 해당 HTML 문서 전체를 나타내는 노드. 
					: html 문서 당 하나 씩 존재
				: document 객체를 가리킴. 
					:  주의) html 이 루트 "요소"라고는 하지만, DOM 에서 루트 노드는 아니다!
					: BOM 의 최상위 객체인 window 객체로도 접근 가능 (window.document)
				: element 노드를 자식 노드로 함

			element 노드 
				: 모든 html 요소( <html> 포함 )를 노드화 한 것.
				: attribute 노드, text 노드를 자식 노드로 함

			attribute 노드
			 
			text 노드 : 리프 노드 
				: html 문서 내의 텍스트를 노드 화 한 것



		:  JS "등"의  스크립팅 언어를 통해 조작 가능
			: 조작이 가능한거지, js 내에  DOM이 있는게 아니다
			: DOM 은 특정 프로그래밍 언어에 의존하지 않는 독립적인 인터페이스
			: js 에서는 "document " 객체를 통하여 DOM 에 접근, 사용 가능하다.

		: DOM 의 동적 생성과 정적 생성
			: 정적 생성 >> HTML 문서에 존재하는 태그를 노드로 생성하는 것. 
			: 동적 생성 >> 스크립팅 언어를 통해 HTML 문서에 없는 노드를 만드는 것.

		: https://www.codestates.com/blog/content/dom-javascript

		

	: 자바스크립트가 HTML 에 삽입되는 위치 
		(1) 인라인 자바스크립트
		(2) 내부 자바스크립트
		(3) 외부 자바스크립트
