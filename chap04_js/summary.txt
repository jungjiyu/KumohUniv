요즘엔 var 로 변수 선언 잘 안한다. let 이란걸 사용해야된다
const : 상수 선언
변수 선언 보다는 상수 선언을 추천한다. 상수 선언이 불가한 경우 let 을 이용해 변수 선언해라

  console.log( 어쩌구 ) ; >> 다른 언어의 print 와 유사한 기능

innerHTML  , outerHTML 
	: outerHTML >> 태그를 감싸는 것까지 같이 본다

딱히 type cast 없다. 
동적인거 >> assign 할 수 있다
undefined : 초기화 안된거
typeof : 변수의 타입을 명시

수치형 : 정수, 실수, non 모두 가능
	NaN : Not A Number
		: parseInt("안녕하세요"), 100/0 같은거 해도 프로그램이 죽지 않고 NaN 이라는 값이 들어간다
		: isNaN( ) 을 활용하여 해당 값이 NaN 인지 아닌지 알 수 있다


문자열 연산 + 를 사용할 수 있다

백틱 `
	: esc 밑에 있는 거
	: f 를 앞에 쓰고 `문자열{ 변수} 어쩌구{ 변수}  ` 하면 printf 처럼 format 할 수 있다. ? ${ } 로 구성된다? 
	: 일반적인 따옴표(' ") 와 방향이 반대라서 백 틱이라고 한다


객체
	: 사물의 속성attribute 와 동작을 묶어서 표현
	: 객체.속성명 으로 접근 가능
	: js 는 원래 객체 라는 개념이 없는데 (딕셔너리를 사용하여) 객체를 사용하는 거다

연산자 : 다 쓸 수 있다
	: 그런데 + 연산자의 경우 주의해야한다. 일반적인 + 의 경우 교환법칙이 성립해야하지면 여기선 안그렇다. 문자열과 붙어있는 얘들은 먼저 변한다
		: 문자열+ 숫자1 + 숫자2 == "문자열숫자1숫자2"
		:숫자1 + 숫자2+ 문자열 ==


비교연산자	
	: == 와 ===
		== : 맥락상 값이 같으면 참
			ex) '1' == 1 >> true

		=== : 타입과 값이 모두 일치해야 참<< 우리는 이걸 써야된다. == 는 기존의 의미와 벗어나기 떄문에 헷갈릴 수 있어 사용을 지양해야된다
			ex) '1' === 1 >> false
		
	: != 와 !== 도 마찬가지다

prompt( )  : prompt("메시지", "디폴트값"); >> 문자열 반환
confirm() >>> true 혹은 flase 반환

parseInt >> 문자열을 "파싱" 해서 정수형으로 변환해주는거

 write( ) 를 하면 그전에 해당 페이지에 출력했던 내용이 다 사라진다.

getElementById( ) 
	: id를 기반으로 접근
	: 얘 자체는 해당 객체를 가져오는거고 그 객체의 값을 얻기 위해선 value 를 사용해야됨
	: 참고 >> getElementByTagname 같은건 div.ramen 같은걸 대상으로 할때 편하다

자바 스크립트의 함수
	: 함수 안에서 선언된 변순 함수의 생성과 함꼐 생성되고 종료와 함께 종료된다
	: 로컬 변수 같은 경우는 변수명 대충 지어도 되는데 전역 변수의 경우 정성껏 지어라


console.log( ) >> f12-console 선택해서 봐라


반복문
        let i = 0;
        for (i = 0; i < 10; i++)  과 같이 분리해서 적으면 안되고 
 	for (let i = 0; i < 10; i++) 와 같이 한꺼번에 써줘야된다

continue 문장: 가장 가까운 루프의 조건식을 다시 수행

***무명함수 :   함수 이름을 주지 않고 만들어서 한 번만 사용하는 경우도 많다.
	: 자바의 람다함수와 비슷
	: 이름 없는 변수를 선언하는 법 >> 이름 없이 함수를 선언하고 특정 변수에 그 함수를 할당함.

**화살표함수
	: 역사는 수업시간에 다루지 않음.
	: 익명 함수를 더 간단하게 쓰기 위해 도입한 것
	: 이것도 자바의 => 와 비슷한 거임
	: function sub (a,b){	== ( a, b ) => {return a+b; } ==  (a.b) => a+b;
		return a+b;
	}

	: 매개변수가 하나밖에 없으면 괄호 생략 가능
	: 리턴값을 화살표 다음에 쓴다
: 함수를 만들면서 호출하는 것.
((name) => console.log(`Hello, ${name}!`))('World');

