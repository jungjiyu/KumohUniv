트리
	: 부모에서 자식으로 갈 수 있는 단방향 그래프
	: 특정 노드로 가는데 단 하나의 경로만 존재--> 단순 노드에 대한 정보만 저장해주면 됨

최저비용 : 가중치가 가장 적은

그래프
	: 부모에서 자식으로, 자식에서 부모로, 형제에서 형제로 ... 다양한 경로로 살 수 있는것
	: 특정 노드로 가는데 여러 경로가 존재 --> 노드의 정보 뿐 아니라 간선의 정보까지 저장해야됨
	: 구성 요소
		정점 vertex : 트리의 노드에 대응하는 개념
		간선 edge : 길.
			: 경로와 다른 개념임을 주의. 경로는 어디서 어디로 갈수 있다 개념
	: 종류
		양방향 . 무방향 그래프 : 양쪽 방향으로 가능. 
		단방향 . 방향 그래프 : 한쪽 방향으로만 가능

		가중치 그래프 weighted : 모든 간선이 가중치를 가지는 그래프
		비가중치 그래프 unweighted : 모든 간선의 가중치를 1로 하는 그래프
			: 주의 >> 비가중치라고 해서 간선마다 가중치가 없는게 아니라, 가중치가 모두 1로 동일한 것

		순환 그래프 : 하나 이상의 사이클이 있는 그래프
		비순환 그래프 acyclic : 사이클이 없는 그래프



	: 구현 방식 
		adjacency matrix : 2차원 배열
			: n 개의 정점을 가지는 경우 n*n 의 2차원 배열 생성
				: 행 == 출발지, 열 == 도착지
				: 행 --> 열의 경로가 존재하는 경우 해당간선의 가중치값, 없으면 0 으로 값을 줌
			: 무방향 그래프의 경우 "간선수*2" 만큼의 1이 입력됨 
			: 2차원 배열 저장의 장점 >> 추가및제거 와 쿼리 하는데 o(1) 의 적은 시간 복잡도
			: 2차원 배열 저장의 단점 >> O(n*2) 의 공간 복잡도를 가지며, 희소그래프(간선이거의없는그래프)의 경우 메모리 낭비됨

		adjacency list : 연결리스트로 구현
			: 정점을 배열에 저장하고, 간선의 가중치는 연결리스트의 노드에 저장
			: 공간 낭비를 막을 수 있는 효율적인 방법

----------------------------------------------------------------------------------------------------------------------

2차원 배열 구현

