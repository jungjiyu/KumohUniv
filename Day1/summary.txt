

----------------------------------------------------------------------------------------------------------------------------------

프로그램
	: 실행할 수 있는 파일
	: 파일이 저장 장치에 있지만 메모리에는 올라가 있지 않은 정적인 상태

프로세스
	: https://inpa.tistory.com/entry/%F0%9F%91%A9%E2%80%8D%F0%9F%92%BB-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%E2%9A%94%EF%B8%8F-%EC%93%B0%EB%A0%88%EB%93%9C-%EC%B0%A8%EC%9D%B4
	: 실행 '중'인 프로그램
		: 메모리에 올라가있는 상태

	: 메모리 구성
		: 정적영역
			: 코드영역 >> 코드가 기계어 형태로 저장되있음
			: 데이터 영역 >>전역 변수 등등의 데이터가 저장되있음

		: 동적 영역 <-- 프로세스 실행 도중 줄었다 늘었다 함 
			: stack 영역 >> 지역 변수와 같은 임시적인 자료들이 저장되는 공간
				: 스레드 별로 하나씩 생성됨
			: heap 영역 >> 객체 데이터, 생성자와 같은 자료들이 저장되는 공간
 
	: 스레드 - 한 프로세스 내에서 동작하는 여러 실행의 흐름
	: 예시
		:  메모장 여러개 띄운것>> 프로세스를 여러개 띄운것
		: 메모장에서 여러 기능을 사용하는 것  >> 한 프로세스서 여러개의 스레드를 사용하는것

스레드
	: 한 프로세스 내에서 동작하는 여러 실행들의 흐름중 하나
	: 한 프로세스의 스레드들은 각자 stack 영역을 가지며, 나머지 영역(코드,데이터,heap) 은 여러 스레드가 공유하여 사용한다.
		: 각 스레드가 stack 영역을 독립적으로 가짐으로써 스레드가 독립적인 작업을 할  수 있게되는거다
		: 프로세스는 기본적으로 다른 프로세스와 직접 자원 공유를 하지 못한다.
	: 스레드를 사용하는 이유 >> 하나의 서비스 구현을 위해 여러개의 프로세스를 만드는 것보단 가볍다.



프로세스, 스레드의 동시 실행 원리
	:멀티태스킹 기술 떄문.

CPU

	: 하이퍼스레딩
		: (원래는 한개의 코어는 한개의 쓰레드로써 한가지 일만 할 수 있었지만) 한개의 코어에서 2개의 스레드를 가질 수 있게 하는것.

		: n코어 m스레드 CPU
			: n 코어 >> CPU 의 물리적 코어 개수
			: m 스레드 >> CPU 의 논리적 코어 개수
				: CPU 의 스레드와 프로세스의 스레드는 다른거다.
					: CPU의 스레드 >> 하드웨어적 스레드
						: CPU core 가 할 수 있는 일의 단위
					: 프로세스의 스레드 >> 소프트웨어적 스레드

			: ex) 4코어 8스레드 cpu >> 물리적 코어 하나가 실제로는 2개의 작업 가능
				: 그러니까 8개의 작업 동시 처리 가능

	: 작업 처리 방식
		병렬성 Parallelism
			: 
-----------------------------------------------------------------------------------------------------------------------------------자바의 실행 흐름
	소스코드 --> (빌드==컴파일)---> 클래스파일(프로그램) --> 프로세스
		: 소스코드 >> 텍스트 파일 (.java)
		: 바이트코드파일>>0,1 로 표현된 파일 (.class)
			: 클래스 파일이라고도 함
			: JVM 이 읽게됨

		: 컴파일 << 소스파일을 컴터가 이해할 수 있는 기계어로 만드는 과정
		: 주의점
			: java 는 C언어와는 다르게 컴파일러 실행시 소스코드로 바이너리 파일을 생성하는게 아니라 , 바이너리 파일을 생성한다. 그리고 최종적으로 C언어처럼 .exe 파일을 그냥은 만들지 않는다.


기계어(바이너리코드-컴터이해가능0,1이진수언어) >> 어셈블리어( 바이트코드-.class) >> 고급언어(소스코드- 자바c언어..) 

	: JVM 은 바이너리코드가 아닌 파이트코드파일을 읽는다.


-----------------------------------------------------------------------------------------------------------------------------------
JDK
	: JRE,	 javac 컴파일러 등 다양한거 포함
	: javac 컴파일러를 이용해 소스코드(.java)로 바이트코드(.class)를 생성

JRE
	: 실행에 필요한 각종 자바 라이브러리(JVM 을 포함) 담고 있다
	: JVM에게 특정 바이트코드를 실행 요청시킴

JVM Java Virtual Machine
	: 이미 컴파일된 클래스파일을 운영체제 관계없이 실행시켜주는 가상 머신

	: WORA
		: Write Once, Read anywhere
		: 운영체제에 구속받지 않고 어디서든 실행 가능
			: 운영체제에 맞는 JVM 설치하면 해당 컴파일된파일을 실행 가능

	: 주의**** ) JVM 자체는 플랫폼에 종속적인거다.


-----------------------------------------------------------------------------------------------------------------------------------
모듈
	: 패키지 등의 자원을 묶은 단위


자바 패키지
	: 클래스 묶음

자바 API
	: JDK 에 포함된 클래스 라이브러리
		: 이미 만들어진 클래스 의 집합
