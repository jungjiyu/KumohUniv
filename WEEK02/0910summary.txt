arange, linspace -> 배열에 대한 함수
	: 반복적인 작업에 유용

priority 우선순위

자주쓰는 모듈 -> math, numpy
	: math
	    : 제공 함수
		- pi 
		- e 

	: numpy
	    : 제공 함수
		- array
		- matrix
			:행렬 생성 방법
				(1) array 기반 : A = np.matrix( [ [2,4] , [1,3] ] )
				(2) matlab 처럼 : A = np.matrix( ' 2 4 ; 1 3 ' ) 
					: 띄어쓰기 -> 열 구분
					: 세미콜론 -> 행 구분
					: 내부적으론 array 로 변환되어 저장되는 것

			: 행렬의 특정 부분 >> 행렬[ 특정행번호 , 특정열번호 ]
				: array 특성상 index 는 0부터 시작하는거 주의 
					ex )  w[2,0] >> 행렬 w의 3번째 행, 1번째 열 

				: 콜론( : ) >> 여러개를 선택 가능하게 해준다
					단순 : -> 전체 
					n:m -> n<= <m 


		- logspace >> 시험에 안나온다

		- arange, linspace: 한번에 커다란 규칙성을 가지는 array 를 만들고 싶을 떄
		    - arange >> 간격 기반으로, 주어진 범위 내에서 구성된다
			: np.arange(x1,x2,dx)
				: x1 >> 시작값
				: x2 >> "미만"
				: dx >> 간격값

		
		    - linspace>> 갯수 기반으로, 균등한 간격을 가지도록 구성한다
			: np.linspace(x1,x2,n)
				: x1 >> 시작값
				: x2 >> "이하"
				: n >> 값의 갯수

		    - 시험 문제 예상 >> arange 로 표현된걸 linspace 로, linspace 로 표현된걸 arange 로 
		   	x = np.arange(0,1,0.1) >> x = np.linspace(0, 0.9 ,10) 
		    	x = np.arange(1, 100, 8) >> x = np.arange(1, 101, 14.142857)

			A = np.arange(29, 987 , 2.7)  >> A = np.linspace(29, 987, int((987 - 29) / 2.7))
			A = np.linspace( 35, 1024, 33)  >> A = np.arange(35, 1024 + (1024 - 35) / (33 - 1), (1024 - 35) / (33 - 1))

  



	    : 주로 import numpy as np 로 해서 쓴다
	    : matlab 에서의 문법과 유사


python -> 범용목적의 프로그래밍 언어
	: 다양한 종류의 배열이 존재 -> 어떠한 배열이 가장 유리한가 >> array 를 사용한다
		: 왜 -> 인덱스 기반 접근이 가능하고 && 요소의 데이터 타입이 하나이다
			: 굳이 수학 목적으로 쓰는데 다양한 타입을 허용가능한 얘들을 쓸 필요는 없다
	: 참고 
		: 키 값 기반 접근 -> 딕셔너리 
		: 인덱스 기반 접근
			: [ , , .. , ] -> 리스트
			: ( , , .. )  -> 튜플
			: { , ... , } -> 셋


분수 ->부동소수점

정수/정수 -> 소수

variable explorer -> 자료형 쉽게 볼 수 있음


 c = 2 + 4j -> j 는 복소수?



