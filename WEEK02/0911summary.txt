np.arange(2, 99, 3.5)-> np.linspace(2, 96.5, 28)
	: np.arange(2, 96.5 , 28) >> 2부터 99 미만까지 3.5씩 증가하는 배열
	    : 결과 배열은 [2, 37, 72]
	:  시작값 2, 끝값 96.5, 그리고 28개의 값을 생성해야
	:  np.linspace(2, 96.5, 28)  
		:  시작값 2, 끝값 96.5, 그리고 28개의 값을 생성해 

np.linspace(101, 263, 10) -> np.arange(101, 264, 18)
	: 간격 = (263 - 101) / (10 - 1) = 18


공식 >>
	np.arrange(a,b,c) -> np.linspace( a, a + ( (b - a) // c -1)*c , (b - a) // c + 1)
	np.linspace(x,y,z) -> np.arrange( x , y+(y-x)/(z-1) , (y-x)/(z-1) )



// 연산자 >> 몫 연산자

연산자의 우선순위  : ** > - (단항연산자) > * , // , / , % > +, -
	: 일반적으로 왼쪽-> 오른쪽 방향으로 수행되지만, 예외적으론 ** 는 오른쪽 -> 왼쪽 방향으로 수행한다
	

복소수의 허수로써의 j 와 일반 j 의 구분법 >> 에디터 창에서 소괄호가 쳐져있음 복소수
	: a = 2 + 3j 하면, 결과창엔 (2+3j) 로 표현됨
		: 이걸 complex(2,3) 으로도 표현 가능


행렬 >> 행 과 열로 이뤄진 .. 
	: 보통 대문자 표기
	: 행렬의 덧뺼셈 연산 >> 사이즈(행사이즈 와 열사이즈)가 같은 얘들끼리만 가능, 같은 위치의 원소끼리 덧뺼셈 수행
	: 행렬의 곱셈 >> 앞행렬의 열 사이즈와 뒷 행렬의 행 사이즈가 같아야 가능
		:  i번쨰행 * j번쨰 열 == ij원소	
	: A*A == A**2

******: 행렬곱을 안하고 싶을 떄 . 걍 곱하기 연산을 한번에 각각의 자리 끼리 하게 하고 싶을 떄 >> np.multiply(A, B)
		: 그러니까 단순 A 의 ij원소와 B의 ij원소 수준으로만 곱셈해주는거임 . item 바이 item
		: 그러니까 A*B != np.multiply(A, B)

******: 전치하고 싶을 때 >> A.transpose( )
		: 전치 >> 행 과 열을 swap 하는 행위
	


벡터 >> 행혹은 열만 1개인 행렬


배열 
	: 행렬이 아닌 배열끼리의 곱셈의 경우 ( np.multipy 처럼 ) 원소 끼리의 곱셈이 이뤄진다
	: 내적 계산 >> dot 함수 사용
	: 벡터곱 부분은 시험에 안나온다



잘 쓰는 함수
    : 빌트인 함수
	abs >> 절댓값
	round >>  
	max , min>> 최대, 최소

    : math 모듈 함수
	sqrt >> 루트
	log(x) >> 밑이 e 인 로그. 자연 로그
	log10(x) >> 밑이 10인 로그
	log(x ,n)  >> 밑이 n 인 로그
	exp(x) >> e 의 x 승
	sin , cos, tan , asin , acos , atan, sinh, cosh, tanh >> 삼각함수관련



매 초마다 속도를 구하는 법
	sol1 > 함수화해서 여러번 호출 (루프)
******sol2 > 벡터화 : 3장에서 진행
		: 벡터화를 한다고 해서 시간복잡도가 줄어드는건 아니지만 코드가 간결해진다
		: 23페이지


    주의 
	math.tanh >> 여러 값을 받을 수 없다
		m=60
		g=9.81
		cd=0.25
		t=4
		v= math.sqrt(m*g/cd)*math.tanh(math.sqrt((cd*g)/m)*t)  #번지점프 표현해보기 


	np.tanh >> 여러 값을 받을 수 있다
		tm = np.linspace(0,20,11)
		g = 9.81 ; m = 68.1 ; cd = 0.25
		vv = math.sqrt(m*g/cd)*np.tanh(math.sqrt(cd*g/m)*tm) #번지점프 여러번 표현해보기 



참고 >> pylab  쓰면 예쁘게 그래프 그릴 수 있다



문제 >> 



#기타

print('{0:5.2f}'.format(v))

def 함수명(파라미터):
	, , , ,
	return 어떤 것



