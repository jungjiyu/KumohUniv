▪임베디드 컴퓨터 : 내장 컴터
	- 작다.. 다른 기기에 내장되어있다. 
	- 목적이 정해져있다. (전용 컴퓨터)
		- 적당한 성능 (너무 높지도 낮지도x)

▪개인용 컴퓨터 : 
	- 다양한 목적으로 활용 가능
	- 저가 . 소형
	- 데스크탑, 노트북, 태블릿


▪워크스테이션 : 서버급 컴터. 전문가용
	- 전문가들용 성능이 우수한 컴터 

▪ 슈퍼미니컴터: . 더 성능 좋음
	- 다중 프로세서 구조
		: 자세한건 8장에서 ...

▪ 메인프레임 컴퓨터 : 방 하나를 차지하는 대형 컴퓨터. 더 성능 좋음
	- 중앙집중식
	- 대형
	- 요즘엔 적당한 중형급 크기의 (워크스테이션 급의 컴퓨터를) 여러개 묶는 방식으로 만들고 있다 
		- 다운사이징 가능 (필요한 만큼의 성능으로 만들 수 있다. 가성비)
		- how 가능 ? 
			- 네트워크 인프라가 많이 발전
			- 시스템 성능 발전

▪ 슈퍼 컴퓨터 : 성능이 ㅈㄴ ㅈㄴ ㅈㄴ 좋은 컴터
	- 분류기준이 점점 상승하고 있다
	      - (과제)  10 의 7 승 즉 1000만 배 차이
	   	 : 100 MFLOPS >>  10 의 8승 급
			- 100 만 -> 10의 6승
	    	: PFLOPS >>  10 의 15승 급


	- 분류
		- 파이프라인 슈퍼컴퓨터 pipeline supercomputer
			- 초고속 CPU들을 여러 개 연결

		- 대규모 병렬컴퓨터 massively parallel processing system
			- 수십만개 이상의 범용 프로세서들
			- 병렬처리 기술 이용
			- 8장 계속
			- 보통 한 곳에 모여있음


		-  *** 클러스터 컴퓨터 Cluster Computer
			- 주로 네트워크로 연결되어있음
			- "클러스터 미들웨어"를 이용하여 노드 단위의 워크스테이션들을 하나의 컴터/시스템처럼 작송
				- AWS 의 리전과 가용영역이랑 비슷한 듯

			


폰 노이만 구조 Institute for Advanced Studies, IAS 컴퓨터
	- 주 기억 장치에 "프로그램(= 명령어)"과 "데이터"를 넣고 차례로 인출하여 처리
	- *** 폰 노이만 구조의 프로그램 처리 과정
			• ① 프로그램 카운터를 이용해 메모리에서 실행할 명령어를 인출
			• ② 제어 장치(제어 유니트)는 해당 명령어를 해독
			• ③ 명령을 실행하는 데 필요한 데이터를 메모리에서 인출하여 레지스터에 저장
			• ④ 산술 논리 연산 장치는 명령을 실행하고, 레지스터나 메모리에 결과를 저장
	- 구조
		- 프로그램 카운터 >> 현재 사용할 명령어의 주소를 가리킴
		- 제어장치 >> 명령어를 해독
		- 데이터가 필요하면 누산기가 가져와서 ALU 로 보내서 처리
		- 레지스터 메모리 >> 결과를 저장


	- 문제 : 폰 노이만 병목 현상(Von-Neumann Bottleneck). 교통 체증
		: 메모리가  명령어와 데이터명령어 둘 다 저장하고 있어서(시스템 버스도 하나 인 것) , CPU 가 메모리에서 명령어 또는 데이터 하나만 인출 가능. 두 개를 동시에 할 수 없음. 기다려야됨 . CPU 가 놀고 있어야됨. 
			: 성능이 떨어진다.
			: 메모리와 cpu 사이의 시스템 버스에서 발생하는 것
			

	- 해결 : 비 폰 노이만 구조>> 병목현상을 줄이기 위한 새로운 방식의 컴퓨터 구조
		- 병렬 컴퓨팅
		- 양자 컴퓨팅
		- 신경망 컴퓨팅 
		- 광자 컴퓨터
		- 하버드 구조 
			: 프로그램(명령어) 저장용 메모리, 데이터 저장용 메모리를 따로 둠
			: 시스템 버스도 따로 둠


요즘에는  폰 노이만 구조와 하버드 구조를 결합하여 효율성을 높임

		
-----------------------------

<2. CPU의 구조와 기능>

CPU의 
	- 기본 구조
		- 기억장치의 프로그램 코드(=명령어)를 실행
	 - 동작
	     type1. 모든 명령어에 대해 수행됨
		- 명령어 인출 : 기억장치로부터 명령어를 읽음
		- 명령어 해독

	    type2. 명령어에 따라 필요한 경우에만 수행됨
		- 데이터 인출 : "명령어가 데이터를 필요로하는 경우에만" 기억장치 혹은 I/O 장치로부터 그 데이터를 읽음
			- 데이터 인출이 필요 없는 명령어 ex ) 
				- 분기(실행순서결정)
				- 초기화 
 
		- 데이터 처리 : 데이터에 대한 연산 수행
		- 데이터 저장 : 수행 결과를 저장


산술논리연산장치 ALU
	- 산술/논리연산하는 얘
	- 3장에서 배운다
	- 제어 unit ==제어 장치
	- AC : ALU가 연산하는 과정 중간에 값을 임시저장하는 얘


레지스터 register
	- CPU 안에 있는 임시 기억 장치
		- cpu 내부에 "소수"가 위치해있다
		- 액세스 속도가 가장 빠른 기억 장치

	- 구분
	    - 범용 레지스터
	    - ***** 특수 목적용 레지스터<< 다 외워라
		• 누산기(Accumulator, AC) >> ALU 연산 과정의 중간값 저장. ALU 가 쓰는 레지스터.
		• 프로그램 카운터(Program Counter, PC) >> 책갈피 역할. 명령어를 어디까지 수행했는지, 다음에 어떤 명령어를 실행해야하는지 저장.   
		• 명령어 레지스터(Instruction Register, IR) >> 명령어가 대기하는 장소
		• 메모리 버퍼 레지스터(Memory Buffer Register, MBR) >> 데이터 버스와 연결되있는 레지스터
		• 메모리 주소 레지스터(Memory Address Register, MAR) >> 주소 버스와 연결되있는 레지스터


제어 유니트(control unit, 제어 장치)
	- 프로그램 코드(명령어)를 해석하고, 그것을 실행하기 위한 제어 신호들
(control signals)을 순차적으로 발생시킴


CPU 내부 버스(CPU internal bus)
	- ALU와 레지스터들 간의 데이터를 전달하는 데이터 선들과 제어 유니트에
서 발생되는 제어 신호를 전달하는 선들
	-  "MAR" , "MBR" 이 "cpu 내부 버스"와 연결되어있다
		- 직방으로 cpu 내부 버스와 주소버스/데이터버스를 연결하지 않고 MAR 과 MBR 을 거치게 하는 이유 >> 속도 차 떄문에 대기할 곳이 필요.   (cpu 가 시스템 버스보다 ㅈㄴ 빠름 . 이거 안해줌 성능이 떨어지게됨.)







