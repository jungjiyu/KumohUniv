
 float
	: https://inpa.tistory.com/entry/CSS-%F0%9F%93%9A-float
	:  해당 요소를 다음 요소 위에 떠 있게 한다. 
		: 떠있다 == 요소가 기본 레이아웃 흐름에서 벗어나 요소의 모서리가 페이지의 왼쪽이나 오른쪽에 이동

	: 원래 이미지와 텍스트 배치 용도로 등장했지만, 요즘에는 레이아웃용으로 많이 사용하고 있습니다.
	: 할당 가능한 값 >> 해당 위치에 떠있게 한다
		none (기본값) : 정렬하지 않는다.
		left : 다음 요소의 왼쪽에 떠있게 한다
		right: 다음 요소의 오른쪽에 떠있게 한다


	: 해당 블럭 다음에 오는 요소를 어케 표시할지 결정

	: block element에만 적용할 수 있다.
		: display 속성과 함께 쓰면 display 속성은 무시된다.
		: 엥 근데 img 에는 왜 되는건데

	: width, height 설정이 가능하다


clear
	: float 속성을 중단할 때 사용한다
	: 할당 가능한 값 ) 주로 both 를 쓴다
		none (기본값) >> clear 을 설정하지 않는다
		right >> float:right 를 취소 시킨다(== 요소가 왼쪽에 부유한 다음 요소에 위치하게 한다)
		left >> float:left 를 취소 시킨다
		both >> float: right, float:left 를 둘 다 취소 시킨다(== 요소가 왼쪽과 오른쪽에 부유한 요소 다음에 위치하도록 한다. )

	

	: float 속성이 적용된 요소가 다음 요소들과 겹치는 현상을 방지하기 위해 사용된다
 		: 요소에 float 속성이 적용되면 그 이후에 등장하는 모든 요소들은 정확한 위치를 설정하기 힘들어 지게 되는데, 따라서 clear 속성을 사용하여, 이후의 요소들이 더는 float 속성에 영향을 받지 않도록 설정해주어 요소들이 float 속성이 적용된 요소 "아래"에 위치하도록 한다.
	: float 프로퍼티를 사용할 때 요소의 위치를 고정시키는 position 프로퍼티의 absolute를 사용하면 안된다. float 속성이 relative한 위치 지정을 하기 때문에 position: absolute 속성이 적용되지 않기 때문이다.
또한 float 속성을 사용하면 해당 요소는 일반적인 흐름에서 벗어나게 되어 요소의 부모 요소는 해당 요소의 높이를 인식하지 못하게 되는데, 이 경우 부모 요소에 overflow: hidden 속성을 추가하여 해결할 수 있다.


 .clearfix : 영역을 잡아주기 위한 css 속성.
	: float으로 컨텐츠를 띄울 시 다음 내용은 빈자리를 채우려 올라오게 된다.이러한 현상은 브라우저의 오류로 생겨난 것이고,이를 해결하는 clearfix는 위의 오류를 해결하기 위한 일종의 버그 해결 방법이다.



#333 >> 검은색은 아닌데 어두운 색. 0 에 가까울 수록 밝은 색깔인거임

list-style-type: bulltet 을 조정
text-decoration: 언더라인 여부 조정
overflow: hidden;


모듈화를 하자. 그러니까 부품으로 세분화 해서 필요에 따라 조립해서 쓰자



# **z-index**
- 요소의 스택 순서를 지정
	: 숫자가 작을 수록 더 바닥에 출력된다
	: 숫자를 음수로 줄 수도 있다

Overflow
	: overflow 속성은 자식 요소가 부모 요소의 범위를 벗어났을 때, 어떻게 처리할 것인지를 지정한다.
	: 값
		1. hidden : 넘치는건 안보이게 한다
		2. scroll : 넘치는건 스크롤해서 볼 수 있게 한다

테이블은 리사이즈 하면 반응하기 좀 어렵다
	: ㅈㄴ 옛날 방식

linear : 선형적 >> 동일한
ease : 빨라졌다가 느려짐 ?
ease in  : 늦었다가 빨라짐 ?
ease-out ?


@keyframes


태그에서 " " 쓰면 안된다 ! ' ' 써야된다


**Mini Project: 쇼핑몰 웹사이트 제작**
1. 계획 >> 타당성 분석
2. 설계 >> 어케 구현할지 계획짠다. 스케치


--------------------------------------------------------------------------------------------------------------

자바 스크립트
	: 자바랑은 다른거다. 걍 홍보 차원에서 이름만 빌려다 쓴거다
		: 자바 >> 컴파일(한꺼번에)
			: jvm 에서 실행된다
			: 변수의 타입을 선언해야된다

		: 자바스크립트 >> 인터프리터(한줄마다)
			: 브라우져 위에서 실행된다
			: 변수의 타입을 선언하지 않아도 된다
			: 객체지향처럼 흉내내지만 객체 지향이 아닌거 주의
			: Impure programming >> 순수하지 않다. 프로그램이 실행되는 중간에 프로그램을 바꿀 수 있다
				: 시험 문제 안낸다

		: 구조적 프로그래밍 : {  }쓸 수 이ㅣㅆ는거.
			: 자바, 자바스크립트 모두 구조벅 프로그래밍 언어

		: 람다 함수
			: firstclass object ) a = 1 + 2

" : 더블 쿼테이션
' : 싱글 쿼테이션


자바 스크립트의 용도
	: HTML 콘텐츠를 "동적"으로 변경할 수 있다.
 	: 사용자가 입력한 값들을 검증하는 것도 가능
	: 게임이나 애니메이션과 같은 상호대화적인 콘텐츠를 구현할 수 있다
		: 빠르다

	: this == 이벤트를 받은 객체

jsp == java 가 microsoft 배껴서 만든거
Node.js ==  자바스크립트를 서버 프로그래밍 언어로 변환시킨거



string 이 html 로 오면 그걸 분석한다. 그러니까 그걸 파싱해서 객체 구조로 만든다. 
document 는 그 객체 구조의 root를 의미한다. 그러니까 해당 웹 페이지 전체를 나타내는 객체이다.

!! DOM Document Obejct Model: HTML 문서를 객체화한 것
	: HTML이 파싱을 거치면 DOM tree,

React, Flutter → VDOM(Virtual DOM)


자바스트립트 위치: <head>와 <body>의 차이점.. 
	: 작은건 <head> 에다 넣어도 좋지만, <body>의 끝에 넣는걸 추천한다
	: 조금조금씩 내용을 보여줄 수 있고, 좀 기다리되 빡 보여주는 방법이 있다

- HTML 문서에서 자바스크립트 코드를 <head>에 넣으면
    - 웹 페이지가 완전히 로드되기 전에 스크립트가 먼저 로드되고 실행
    - 웹 페이지의 다른 내용이 나타나기 전에 스크립트 처리가 완료되어야 하므로 페이지 로딩이 느려질 수 있음
- 작동 원리
    - HTML 내부에 복잡한 라이브러리나 사진 또는 동영상이 포함되는 경우, 모두 다운로드 받은 후에 보여주면, 반응 속도가 늦어진다.
    - 따라서, 다운로드 도중에도 처리를 하여 반응 속도를 향상시킨다.
- 자바스크립트 코드를 <body> 태그의 끝부분에 넣으면
    - 페이지의 HTML 내용이 먼저 로드되고 사용자에게 표시된 후에 스크립트가 로드되고 실행
    - 이 방식은 사용자가 페이지의 내용을 거의 바로 볼 수 있게 해주므로, 사용자 경험을 개선합니다.
- 간단히 말해, <head>에 스크립트를 넣으면 반응 속도가 느려질 수 있고, <body> 끝에 넣으면 사용자가 내용을 더 빨리 볼 수 있음.


내부 자바 스크립트
	:  <script> 문 내부에 직접 실행 내용을 적음

외부 자바스크립트
	: <script> 문 내부에 js 파일을 링크 시킴

인라인 자바스크립트
	: element 태그 에 직접 적음

기본 문법 : 
	' ; ' : 안찍어 줘도 된다(그래도 문장으로 인식된다). 그래도 관습상 찍어주자
		: 근데 막상 ctrl+s 하면 ';' 생략된 형태로 저장된다고 한다

	변수 
