!! tip >> 강의에 [TMI] 붙어있는건 시험에 안나온다


하드웨어 : 물리적인 실체
소프트웨어 : 명령 집합


주요 하드웨어
	중앙처리장치 >> CPU
	기억장치 Memory
		주기억 RAM
			:CPU의 작동을 위한 명령어가 다 저장되어있다
		보조기억
	시스템버스 : 연결시켜주는 통로
	입출력장치


CPU >> 컴퓨터의 특성(64bit, 32bit ... )을 결정
	: CPU 를 프로세서 또는 마이크로프로세서라고한다
	" RAM 에 저장되있는 명령어를 가져와서 CPU가 쓴다
	: 시스템 버스 VS cpu 내부 버스
		: 시스템 버스 >> 하드웨어들을 연결해주는..
		: cpu 내부 버스 >> cpu 내부 컴포넌트 들을 연결해주는 것
	: cpu 와 가까울 수록 그걸 활용할 수 있는 속도가 빠르다.
	: 핵심적인 컴포넌트
		산술 논리 연산 장치 ALU : 여기서 산술/논리/보수/시프트 연산을 수행한다
			: vLLM 에서는 LPU ... 

		제어장치 CU
			: RAM 에서 가져온 명령어를 해독(뭐 덧셈하는거구나.. 그런)하는 장치

		레지스터 register : 중앙처리장치 내부에 있는 데이터를 일시적으로 보관하는 임시 기억 장치
			: 프로그램 실행중에 고속액세스를 위해 사용됨.
			: 임시 버퍼


주기억장치 MM Main Memory >> 프로그램 실행시키는게 목적
	: 가격이 비싸다
	: 반도체 칩으로 구성되어 고속 접근이 가능하지만 , 비싸고, 면적을 많이 차지 >> 저장 용량이 작다
	: 프로그램 실행 중에 일시적으로만 사용된다
	: 휘발성 메모리
	: 시스템 버스로 cpu와  직접 연결될수있다
	

보조기억장치. 2차기억장치 secondary Memory >> 영구 저장 목적
	: 속도 느림 but 저장밀도가 높다 
		: 저장밀도가 높다 == 좁은 면적(비트)으로 오밀조밀 저장 가능하다.
	: 비휘발성
	: 플래시 메모리 >> USB같은거
	: 하드디스크 HDD >> 원형 디스크가 기계적으로 돌아가 작동된다
		: ㅈㄴ 느리다
	: 시스템 버스로 cpu와  직접 연결되는게 아니라 "보조기억장치제어기"를 통해 연결된다
		: 속도 차가 너무 많이 나서 직접적으로 연결될 순 없다
		: 보조기억장치제어기는 버퍼 같은 얘다

입출력장치 >> 상호작용위한 장치
	: 보조기억장치와 마찬가지로 직접적으로 연결되진 못하고 별도의 제어기를 통해 CPU가 접근하게된다
	: 입력장치 >> 데이터를 2진 형태로 변환해 전달
	: 입력장치 >> 전자 형태 데이터를 사람이 이해하기 쉬운 형태로 변환해 전달


소프트웨어
	: 시스템소프트웨어 >> 사용자가 직접적으로 쓰진 않는, 간접적으로 사용되는
		: 대표적으로 
			운영체제 
			언어번역프로그램(컴파일러)
			유틸리티프로그램(압축 프로그램같은)

	: 응용소프트웨어 >> 사용자가 직접적으로 활용하는
		: 대표적으로 
			크롬..
			팟플레이어




<2. 시스템의 구성>

시스템 버스 >> 컴퓨터의 주요 하드웨어를 연결하는 장치
	: 컴포넌트
		1. 주소버스 >> 주소 이동
			: CPU 가 기억, 입출력 장치에게 주소를 "지정"하는 신호 선들의 집합
			: 단방향전송 uni-directional >> 
				; CPU 가 기억장치나 I/O 장치의 주소를 지정하는건 가능하지만, 기억장치나 I/O 장치가 CPU의 주소를 저장하지 않는다

			: 주소선의 수가 많아질수록 CPU와 연결될 수 있는 최대 기억장치 용량이 커진다

		2. 데이터버스 >> 데이터, 명령어 이동
			: 양방향전송 bi-directional 전송 >> 읽기, 쓰기 동작을 모두 지원
				: 읽기는 무슨 방향
				: 쓰기는 무슨 방향

			: 데이터 선의 수는 CPU가 한번에 전송 가능한 데이터의 비트 수를 결정
				: ex ) 폭이 32비트면, 32비트씩 전송가능

		3. 제어 버스 >> 컴터가 어떤 동작하는지 알려주는 "신호"들의 집합
			: CPU가 시스템 내의 다른 장치들에게 어떤 동작을 해야하는지 알려주는 신호를 보낸다
			: 대표적인 신호
				: 기억장치 읽기/쓰기
				: I/O 읽기 쓰기
				.
				.
				.

	: 속도 차이로 인해 RAM 같은것 빼고는 모두 제어기를 통해 cpu와 연결시켜준다




CPU와 기억장치의 접속access 방식
    : access >> CPU가 기억장치의 특정 장소에 저장(=쓰기)하거나, 이미 저장된걸 읽는 동작
    : 기억장치
	: 기억장치 쓰기 동작
		: 주소버스가 4bit, 데이터버스가 8bit, 쓰기 신호는 읽기/쓰기 신호
			:  CPU 가 주소 버스에 0101(주소 예시임)을 MM에 보낸다 -> 데이터 버스에 쓰고 싶은 0011 0011(데이터 예시임)를 MM에 보낸다 -> 쓰기 신호를 활성화 시키고, 읽기 신호는 비활성화 시킨다 -> MM에서 0101 위치에 "0011 0011"을 작성한다


	: 기억장치 읽기 동작 << 지연시간이 발생한다
		: 주소버스가 4bit, 데이터버스가 8bit, 쓰기 신호는 읽기/쓰기 신호
			:  CPU 가 주소 버스에 0101(주소 예시임)을 MM에 보낸다 -> 바로 데이터버스에서는 보내진 않고 지연된다 -> 읽기 신호를 활성화 시키고, 쓰기 신호는 비활성화 시킨다 -> MM에서 0101 위치의 데이터를 읽어 잠시 뒤 데이터버스에 적재된다

	: 보조 기억장치의 데이터는 크기 떄문에 , 보조 기억 장치 내부의 버퍼(데이터 기억장치)의 크기도 크다
		: 보조 기억장치의데이터 단위는단위가 블록 단위, 페이지 단위


    : I/O 장치
	: I/O 장치 제어기 >> CPU로부터 I/O 명령을 받아서 해당 I/O장치를 제어
		: 컴포넌트 << 각 레지스터에는 """주소"""가 부여된다.
			: 상태 레지스터 >> 해당 장치의 상태를 알려준다
				: ex ) 키보드의 상태 레지스터는 'A'가 눌리면 'A' 가 눌렸다고 알려준다
				: ex ) 프린터의 상태 레지스터는 오류가 발생하면 오류가 발생했다고
				: cpu 가 해당 장치가 정상적으로 작동하는지 확인 가능하게 해준다
					: 정상적이면 값이 1이다

			: 데이터 레지스터 >> 데이터 버퍼. 데이터를 일시적으로 저장
				: 데이터 단위가 대게 바이트 단위로, 작다

	: 키보드의 데이터 입력 과정 
		: 키보드 제어기 
			: 어떤 키를 눌렀는지 알려준다 >>A누르면 A에대한 아스키코드가 "키보드 제어기의 데이터 레지스터"에 저장되고, 상태 래지스터의 비트가 1 로 세팅된다.

		: CPU가 주기적으로 키보드 제어기로부터 상태 레지스터의 내용을 읽어서 특정 비트(in_RDY)가 1로 세팅되었는지 검사
		: 만약 상태 가 
			1이면 데이터 레지스터의 내용을 읽는다
			0아면 데이터 레지스터 안읽고 계쏙 상태 체크한다


		
컴퓨터의 기능 
	: 프로그램 코드를 정해진 순서대로 수행 >> 읽고 read , 처리 process 하고, 저장 store
		: 컴퓨터가 꺼지기 전까지 "무한반복"한다

	: 기본적인 수행 기능들
		: 프로그램 실행
		: 데이터 저장
		: 데이터 이동
		: 데이터 입력 및 출력
		: 제어 >> 프로그램에서 정해진 순서에 따라 실행하도록 한다
			: 완전 순서가 고정된건 아니고 조건문(if)이나 , 반복문으로 정해진 순서를 바꿀 수 있다. 


컴퓨터의 정보 >> 프로그램 코드(=명령어)와 데이터

프로그램 코드
	기계어 >> 0,1 로 이뤄진 기계가 이해할 수 있는.. 
		: 기계어는 모든 기계가 같은건 아니고 컴퓨터마다 다를 수 있다
	어셈블리 언어 >> 기계와 고급의 사이 언어.
		: 기계어와 "1대1 대응"이된다
			: 어셈블리어가 n줄이면, 기계어도 n줄로 번역된다
		: 고급어를 기계어로 변환하는 과정에서 거치게된다
	고급언어 >> 영문자,숫자로 구성되어 사람이이해하기쉬운
		: c , python 같은


컴파일러와 인터프리터 >> 둘다 언어를 기계어로 번역하는 소프트웨어. 근데 변환 과정이 다름
	: 컴파일러 >> 전체 소스 코드를 한번에 번역			
		: 실행 전에 한번 쭉 검사한다
		: "컴파일 오류"와 "실행파일"이란 개념이 존재하고, "최적화"가 가능한다
		: java

	: 인터프리터 >> 한줄 씩 읽는다
		: 한줄씩 읽으면서 실행한다.
		: 최적화에 한계가 있고, "실행파일"이란 개념이 없다
		: python

	: 어셉블러 >> 어셈블리 프로그램을 기계어 프로그램으로 번역하는 소프트웨어
		: 대표적인 어셈블러로는 니모닉스 라는게 있다


기계어의 형식
	: n+m비트 짜리 기계어 == 연산코드OP OPeratoion code(어떤 연산을 해야하는지 나타냄) n비트+ 오퍼랜드 operand(피연산자) m비트


프로그램 코드와 데이터의 기억장치 저장
	: 프로그램 코드(=명령어) 와 데이터는 지정된 기억 장소에 저장
******: "단어 단위"로 저장된다
		: "단어" >> CPU에 의해 한번에 처리될 수 있는 비트들의 그룹
			:64비트 컴터에선 단어 단위가 64비트인것

	; "주소 지정 단위"로 읽는다
		: 주소지정단위와 단어의 단위는 다를 수 있다 (64비트 단위로 저장되도, 주소지정단위가 32비트면 32비트씩 저장된 내용을 읽어오는거다)






<4.컴퓨터 구조의 역사>

- 영상은 안봄

컴퓨터의 역사
	주판 - 기계식 계산기 - 해석 기관(연산카드, 변수카드 같은걸 활용하고, 출력이 가능했다. 수동 작동 방식이지만, 오늘날의 컴퓨터 구조와 유사. 구상은 했는데 실제로 만들진 못했다.) 


	부품
		릴레이 -> 진공관 -> 트랜지스터 -> 반도체 집적회로 IC 
			: 집적회로 >> 수만개의 "트랜지스터"들을 하나의 칩에 집적시킨 전자부품



